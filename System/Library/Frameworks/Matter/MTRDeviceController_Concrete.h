//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "MTRDeviceController.h"

@class MTRAsyncWorkQueue, MTRCommissionableBrowser, MTRDeviceControllerDataStore, MTRDeviceControllerFactory, MTRDeviceStorageBehaviorConfiguration, NSMutableArray, NSNumber, NSObject;
@protocol MTROTAProviderDelegate, OS_dispatch_queue;

@interface MTRDeviceController_Concrete : MTRDeviceController
{
    struct atomic<unsigned char> _storedFabricIndex;	// 8 = 0x8
    struct atomic<std::optional<unsigned long long>> _storedCompressedFabricID;	// 16 = 0x10
    struct MTRP256KeypairBridge _signingKeypairBridge;	// 32 = 0x20
    struct MTRP256KeypairBridge _operationalKeypairBridge;	// 728 = 0x2d8
    unsigned long long _keepRunningAssertionCounter;	// 1424 = 0x590
    _Bool _shutdownPending;	// 1432 = 0x598
    struct os_unfair_lock_s _assertionLock;	// 1436 = 0x59c
    _Bool _shouldAdvertiseOperational;	// 1440 = 0x5a0
    NSObject<OS_dispatch_queue> *_chipWorkQueue;	// 1448 = 0x5a8
    MTRDeviceControllerDataStore *_controllerDataStore;	// 1456 = 0x5b0
    MTRDeviceControllerFactory *_factory;	// 1464 = 0x5b8
    id <MTROTAProviderDelegate> _otaProviderDelegate;	// 1472 = 0x5c0
    NSObject<OS_dispatch_queue> *_otaProviderDelegateQueue;	// 1480 = 0x5c8
    MTRCommissionableBrowser *_commissionableBrowser;	// 1488 = 0x5d0
    MTRAsyncWorkQueue *_concurrentSubscriptionPool;	// 1496 = 0x5d8
    MTRDeviceStorageBehaviorConfiguration *_storageBehaviorConfiguration;	// 1504 = 0x5e0
    NSNumber *_controllerNodeID;	// 1512 = 0x5e8
    void *_cppCommissioner;	// 1520 = 0x5f0
    void *_partialDACVerifier;	// 1528 = 0x5f8
    void *_defaultDACVerifier;	// 1536 = 0x600
    struct MTRDeviceControllerDelegateBridge *_deviceControllerDelegateBridge;	// 1544 = 0x608
    void *_operationalCredentialsDelegate;	// 1552 = 0x610
    void *_deviceAttestationDelegateBridge;	// 1560 = 0x618
    struct MTRAttestationTrustStoreBridge *_attestationTrustStoreBridge;	// 1568 = 0x620
    NSMutableArray *_serverEndpoints;	// 1576 = 0x628
}

+ (_Bool)checkForError:(struct ChipError)arg1 logMsg:(id)arg2 error:(id *)arg3;	// IMP=0x006000000053cea6
- (id).cxx_construct;	// IMP=0x000000000054001a
- (void).cxx_destruct;	// IMP=0x000000000053ff16
@property(readonly, nonatomic) _Bool shouldAdvertiseOperational; // @synthesize shouldAdvertiseOperational=_shouldAdvertiseOperational;
@property(readonly, nonatomic) NSMutableArray *serverEndpoints; // @synthesize serverEndpoints=_serverEndpoints;
@property(readonly, nonatomic) struct MTRAttestationTrustStoreBridge *attestationTrustStoreBridge; // @synthesize attestationTrustStoreBridge=_attestationTrustStoreBridge;
@property(readonly, nonatomic) void *deviceAttestationDelegateBridge; // @synthesize deviceAttestationDelegateBridge=_deviceAttestationDelegateBridge;
@property(readonly, nonatomic) void *operationalCredentialsDelegate; // @synthesize operationalCredentialsDelegate=_operationalCredentialsDelegate;
@property(readonly, nonatomic) struct MTRDeviceControllerDelegateBridge *deviceControllerDelegateBridge; // @synthesize deviceControllerDelegateBridge=_deviceControllerDelegateBridge;
@property(readonly, nonatomic) void *defaultDACVerifier; // @synthesize defaultDACVerifier=_defaultDACVerifier;
@property(readonly, nonatomic) void *partialDACVerifier; // @synthesize partialDACVerifier=_partialDACVerifier;
@property(readonly, nonatomic) void *cppCommissioner; // @synthesize cppCommissioner=_cppCommissioner;
- (id)controllerNodeID;	// IMP=0x000000000053fe6d
@property(readonly, nonatomic) MTRDeviceStorageBehaviorConfiguration *storageBehaviorConfiguration; // @synthesize storageBehaviorConfiguration=_storageBehaviorConfiguration;
@property(readonly, nonatomic) MTRAsyncWorkQueue *concurrentSubscriptionPool; // @synthesize concurrentSubscriptionPool=_concurrentSubscriptionPool;
@property(readonly, nonatomic) MTRCommissionableBrowser *commissionableBrowser; // @synthesize commissionableBrowser=_commissionableBrowser;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *otaProviderDelegateQueue; // @synthesize otaProviderDelegateQueue=_otaProviderDelegateQueue;
@property(readonly, nonatomic) id <MTROTAProviderDelegate> otaProviderDelegate; // @synthesize otaProviderDelegate=_otaProviderDelegate;
@property(readonly, nonatomic) MTRDeviceControllerFactory *factory; // @synthesize factory=_factory;
- (id)controllerDataStore;	// IMP=0x000000000053fdf6
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *chipWorkQueue; // @synthesize chipWorkQueue=_chipWorkQueue;
- (id)neededReadPrivilegeForClusterID:(id)arg1 attributeID:(id)arg2;	// IMP=0x000000000053f843
- (id)accessGrantsForClusterPath:(id)arg1;	// IMP=0x000000000053f57a
- (void)downloadLogFromNodeWithID:(id)arg1 type:(long long)arg2 timeout:(double)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000000053f39c
- (void)operationalInstanceAdded:(id)arg1;	// IMP=0x000000000053f0b5
- (void)invalidateCASESessionForNode:(id)arg1;	// IMP=0x000000000053ef7f
- (struct ChipError)isRunningOnFabric:(void *)arg1 fabricIndex:(unsigned char)arg2 isRunning:(_Bool *)arg3;	// IMP=0x000000000053ed63
- (id)compressedFabricID;	// IMP=0x000000000053ed14
- (unsigned char)fabricIndex;	// IMP=0x000000000053ed01
- (_Bool)syncRunOnWorkQueueWithBoolReturnValue:(CDUnknownBlockType)arg1 error:(id *)arg2;	// IMP=0x000000000053ebbf
- (id)syncRunOnWorkQueueWithReturnValue:(CDUnknownBlockType)arg1 error:(id *)arg2;	// IMP=0x000000000053e9cf
- (void)syncRunOnWorkQueue:(CDUnknownBlockType)arg1 error:(id *)arg2;	// IMP=0x000000000053e796
- (void)asyncDispatchToMatterQueue:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000053e6a7
- (void)asyncGetCommissionerOnMatterQueue:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000053e491
- (unsigned char)sessionTransportTypeForDevice:(id)arg1;	// IMP=0x000000000053e233
- (void)getSessionForCommissioneeDevice:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000053ded3
- (void)directlyGetSessionForNode:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000053da4c
- (void)getSessionForNode:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000053d2af
- (_Bool)checkIsRunning:(id *)arg1;	// IMP=0x000000000053d0b3
- (_Bool)checkIsRunning;	// IMP=0x000000000053d09f
- (_Bool)checkForStartError:(struct ChipError)arg1 logMsg:(id)arg2;	// IMP=0x000000000053cd2a
- (void)clearDeviceAttestationDelegateBridge;	// IMP=0x000000000053ccfd
- (_Bool)checkForInitError:(_Bool)arg1 logMsg:(id)arg2;	// IMP=0x000000000053cbd5
- (void)removeServerEndpointOnMatterQueue:(id)arg1;	// IMP=0x000000000053cb3f
- (void)removeServerEndpointInternal:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000053c582
- (_Bool)addServerEndpoint:(id)arg1;	// IMP=0x000000000053bf21
- (id)attestationChallengeForDeviceID:(id)arg1;	// IMP=0x000000000053bca0
- (_Bool)setOperationalCertificateIssuer:(id)arg1 queue:(id)arg2;	// IMP=0x000000000053ba82
- (id)_setupDeviceForNodeID:(id)arg1 prefetchedClusterData:(id)arg2;	// IMP=0x000000000053b73a
- (id)baseDeviceForNodeID:(id)arg1;	// IMP=0x000000000053b6d6
- (id)deviceBeingCommissionedWithNodeID:(id)arg1 error:(id *)arg2;	// IMP=0x000000000053b3d5
- (void)preWarmCommissioningSession;	// IMP=0x000000000053b3b8
- (_Bool)stopBrowseForCommissionables;	// IMP=0x000000000053b254
- (_Bool)startBrowseForCommissionables:(id)arg1 queue:(id)arg2;	// IMP=0x000000000053b045
- (_Bool)cancelCommissioningForNodeID:(id)arg1 error:(id *)arg2;	// IMP=0x000000000053aeaa
- (_Bool)continueCommissioningDevice:(void *)arg1 ignoreAttestationFailure:(_Bool)arg2 error:(id *)arg3;	// IMP=0x000000000053ad61
- (_Bool)commissionNodeWithID:(id)arg1 commissioningParams:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000539bd4
- (_Bool)setupCommissioningSessionWithDiscoveredDevice:(id)arg1 payload:(id)arg2 newNodeID:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000539085
- (_Bool)setupCommissioningSessionWithPayload:(id)arg1 newNodeID:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000538759
- (_Bool)startup:(id)arg1;	// IMP=0x0000000000535f14
- (void)cleanup;	// IMP=0x0000000000535e46
- (void)deinitFromFactory;	// IMP=0x0000000000535e34
- (void)shutDownCppController;	// IMP=0x0000000000535b42
- (void)cleanupAfterStartup;	// IMP=0x0000000000535818
- (void)finalShutdown;	// IMP=0x0000000000535632
- (void)shutdown;	// IMP=0x00000000005354d8
- (void)clearPendingShutdown;	// IMP=0x00000000005354a5
- (void)removeRunAssertion;	// IMP=0x00000000005352b4
- (void)addRunAssertion;	// IMP=0x0000000000535185
- (_Bool)matchesPendingShutdownControllerWithOperationalCertificate:(id)arg1 andRootCertificate:(id)arg2;	// IMP=0x0000000000534f2b
- (void)_controllerResumed;	// IMP=0x0000000000534e20
- (void)_controllerSuspended;	// IMP=0x0000000000534d12
- (_Bool)isRunning;	// IMP=0x0000000000534cfd
- (id)description;	// IMP=0x0000000000534c13
- (id)initWithFactory:(id)arg1 queue:(id)arg2 storageDelegate:(id)arg3 storageDelegateQueue:(id)arg4 otaProviderDelegate:(id)arg5 otaProviderDelegateQueue:(id)arg6 uniqueIdentifier:(id)arg7 concurrentSubscriptionPoolSize:(unsigned long long)arg8 storageBehaviorConfiguration:(id)arg9 startSuspended:(_Bool)arg10;	// IMP=0x0000000000533e35
- (id)initWithParameters:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000533c2c
- (void)setNocChainIssuer:(id)arg1 queue:(id)arg2;	// IMP=0x0000000000541ebb
- (void)setPairingDelegate:(id)arg1 queue:(id)arg2;	// IMP=0x0000000000541e0a
- (id)openPairingWindowWithPIN:(unsigned long long)arg1 duration:(unsigned long long)arg2 discriminator:(unsigned long long)arg3 setupPIN:(unsigned long long)arg4 error:(id *)arg5;	// IMP=0x00000000005414d6
- (_Bool)openPairingWindow:(unsigned long long)arg1 duration:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x0000000000541224
- (_Bool)pairDevice:(unsigned long long)arg1 onboardingPayload:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000540e01
- (_Bool)pairDevice:(unsigned long long)arg1 address:(id)arg2 port:(unsigned short)arg3 setupPINCode:(unsigned int)arg4 error:(id *)arg5;	// IMP=0x0000000000540982
- (_Bool)pairDevice:(unsigned long long)arg1 discriminator:(unsigned short)arg2 setupPINCode:(unsigned int)arg3 error:(id *)arg4;	// IMP=0x0000000000540449
- (_Bool)getBaseDevice:(unsigned long long)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000540105
- (id)fetchAttestationChallengeForDeviceId:(unsigned long long)arg1;	// IMP=0x000000000054008b

@end

