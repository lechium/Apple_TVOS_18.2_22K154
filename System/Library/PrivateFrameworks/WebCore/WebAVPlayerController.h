//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVPlayerController, AVTimeRange, AVValueTiming, NSArray, NSDate, NSString, NSValue, WebAVMediaSelectionOption;

__attribute__((visibility("hidden")))
@interface WebAVPlayerController : NSObject
{
    struct WeakPtr<WebCore::PlaybackSessionModel, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> _delegate;	// 8 = 0x8
    struct WeakPtr<WebCore::PlaybackSessionInterfaceIOS, WTF::DefaultWeakPtrImpl, WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> _playbackSessionInterface;	// 16 = 0x10
    double _defaultPlaybackRate;	// 24 = 0x18
    double _rate;	// 32 = 0x20
    _Bool _liveStreamEventModePossible;	// 40 = 0x28
    _Bool _isScrubbing;	// 41 = 0x29
    _Bool _allowsPictureInPicture;	// 42 = 0x2a
    _Bool _pictureInPictureInterrupted;	// 43 = 0x2b
    _Bool _muted;	// 44 = 0x2c
    double _seekToTime;	// 48 = 0x30
    WebAVMediaSelectionOption *_currentAudioMediaSelectionOption;	// 56 = 0x38
    WebAVMediaSelectionOption *_currentLegibleMediaSelectionOption;	// 64 = 0x40
    struct RetainPtr<AVPlayer> _player;	// 72 = 0x48
    _Bool _canScanBackward;	// 80 = 0x50
    _Bool _hasContentChapters;	// 81 = 0x51
    _Bool _canPlay;	// 82 = 0x52
    _Bool _canPause;	// 83 = 0x53
    _Bool _canTogglePlayback;	// 84 = 0x54
    _Bool _canSeek;	// 85 = 0x55
    _Bool _hasEnabledAudio;	// 86 = 0x56
    _Bool _hasEnabledVideo;	// 87 = 0x57
    _Bool _hasVideo;	// 88 = 0x58
    _Bool _playingOnSecondScreen;	// 89 = 0x59
    _Bool _externalPlaybackActive;	// 90 = 0x5a
    _Bool _allowsExternalPlayback;	// 91 = 0x5b
    _Bool _effectiveRateNonZero;	// 92 = 0x5c
    AVPlayerController *_playerControllerProxy;	// 96 = 0x60
    double _contentDuration;	// 104 = 0x68
    double _contentDurationWithinEndTimes;	// 112 = 0x70
    NSArray *_loadedTimeRanges;	// 120 = 0x78
    long long _status;	// 128 = 0x80
    AVValueTiming *_timing;	// 136 = 0x88
    NSArray *_seekableTimeRanges;	// 144 = 0x90
    NSArray *_audioMediaSelectionOptions;	// 152 = 0x98
    NSArray *_legibleMediaSelectionOptions;	// 160 = 0xa0
    long long _externalPlaybackType;	// 168 = 0xa8
    NSString *_externalPlaybackAirPlayDeviceLocalizedName;	// 176 = 0xb0
    double _seekableTimeRangesLastModifiedTime;	// 184 = 0xb8
    double _liveUpdateInterval;	// 192 = 0xc0
    AVValueTiming *_minTiming;	// 200 = 0xc8
    AVValueTiming *_maxTiming;	// 208 = 0xd0
    struct CGSize _contentDimensions;	// 216 = 0xd8
}

+ (id)keyPathsForValuesAffectingCurrentTime;	// IMP=0x0060000000e70ea0
+ (id)keyPathsForValuesAffectingDisplayedDuration;	// IMP=0x0060000000e70e00
+ (id)keyPathsForValuesAffectingTimeControlStatus;	// IMP=0x0060000000e70db0
+ (id)keyPathsForValuesAffectingIsSeekingTV;	// IMP=0x0060000000e70b50
+ (id)keyPathsForValuesAffectingEffectiveRateNonZero;	// IMP=0x0060000000e70a90
+ (id)keyPathsForValuesAffectingHasSeekableLiveStreamingContent;	// IMP=0x0060000000e70a40
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;	// IMP=0x0060000000e6ff60
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;	// IMP=0x0060000000e6fd20
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;	// IMP=0x0060000000e6fcd0
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;	// IMP=0x0060000000e6fc70
+ (id)keyPathsForValuesAffectingCanSeekToEnd;	// IMP=0x0060000000e6fb80
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;	// IMP=0x0060000000e6f890
+ (id)keyPathsForValuesAffectingCanScanForward;	// IMP=0x0060000000e6f550
+ (id)keyPathsForValuesAffectingMinTime;	// IMP=0x0060000000e6eff0
+ (id)keyPathsForValuesAffectingMaxTime;	// IMP=0x0060000000e6ef40
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;	// IMP=0x0060000000e6ee50
+ (id)keyPathsForValuesAffectingCurrentTimeWithinEndTimes;	// IMP=0x0060000000e6ede0
+ (id)keyPathsForValuesAffectingPlaying;	// IMP=0x0060000000e6eb60
- (id).cxx_construct;	// IMP=0x0000000000e71700
- (void).cxx_destruct;	// IMP=0x0000000000e71670
@property(readonly, nonatomic, getter=isEffectiveRateNonZero) _Bool effectiveRateNonZero; // @synthesize effectiveRateNonZero=_effectiveRateNonZero;
@property(retain, nonatomic) AVValueTiming *maxTiming; // @synthesize maxTiming=_maxTiming;
@property(retain, nonatomic) AVValueTiming *minTiming; // @synthesize minTiming=_minTiming;
@property double liveUpdateInterval; // @synthesize liveUpdateInterval=_liveUpdateInterval;
@property double seekableTimeRangesLastModifiedTime; // @synthesize seekableTimeRangesLastModifiedTime=_seekableTimeRangesLastModifiedTime;
@property _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(retain) NSString *externalPlaybackAirPlayDeviceLocalizedName; // @synthesize externalPlaybackAirPlayDeviceLocalizedName=_externalPlaybackAirPlayDeviceLocalizedName;
@property long long externalPlaybackType; // @synthesize externalPlaybackType=_externalPlaybackType;
@property(getter=isExternalPlaybackActive) _Bool externalPlaybackActive; // @synthesize externalPlaybackActive=_externalPlaybackActive;
@property(nonatomic, getter=isPlayingOnSecondScreen) _Bool playingOnSecondScreen; // @synthesize playingOnSecondScreen=_playingOnSecondScreen;
@property(retain) NSArray *legibleMediaSelectionOptions; // @synthesize legibleMediaSelectionOptions=_legibleMediaSelectionOptions;
@property(retain) NSArray *audioMediaSelectionOptions; // @synthesize audioMediaSelectionOptions=_audioMediaSelectionOptions;
@property(retain) NSArray *seekableTimeRanges; // @synthesize seekableTimeRanges=_seekableTimeRanges;
@property(retain) AVValueTiming *timing; // @synthesize timing=_timing;
@property long long status; // @synthesize status=_status;
@property(retain) NSArray *loadedTimeRanges; // @synthesize loadedTimeRanges=_loadedTimeRanges;
@property double contentDurationWithinEndTimes; // @synthesize contentDurationWithinEndTimes=_contentDurationWithinEndTimes;
@property _Bool hasVideo; // @synthesize hasVideo=_hasVideo;
@property _Bool hasEnabledVideo; // @synthesize hasEnabledVideo=_hasEnabledVideo;
@property _Bool hasEnabledAudio; // @synthesize hasEnabledAudio=_hasEnabledAudio;
@property struct CGSize contentDimensions; // @synthesize contentDimensions=_contentDimensions;
@property double contentDuration; // @synthesize contentDuration=_contentDuration;
@property _Bool canSeek; // @synthesize canSeek=_canSeek;
@property _Bool canTogglePlayback; // @synthesize canTogglePlayback=_canTogglePlayback;
@property _Bool canPause; // @synthesize canPause=_canPause;
@property _Bool canPlay; // @synthesize canPlay=_canPlay;
@property(readonly) _Bool hasContentChapters; // @synthesize hasContentChapters=_hasContentChapters;
@property _Bool canScanBackward; // @synthesize canScanBackward=_canScanBackward;
@property(retain) AVPlayerController *playerControllerProxy; // @synthesize playerControllerProxy=_playerControllerProxy;
- (void)requestSeekToTime:(double)arg1 reason:(long long)arg2 playWhenReady:(_Bool)arg3;	// IMP=0x0000000000e711e0
- (void)requestPlayWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000e711a0
- (void)requestPauseWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000e71160
- (void)requestSeekToTime:(double)arg1 seekReason:(long long)arg2 permissionHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000e71100
- (void)seekToTime:(double)arg1 seekReason:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000e710c0
- (void)requestNavigateToTime:(double)arg1 fromTime:(double)arg2 reason:(long long)arg3 playWhenReady:(_Bool)arg4 permissionHandler:(CDUnknownBlockType)arg5 seekCompletion:(CDUnknownBlockType)arg6;	// IMP=0x0000000000e71040
@property(nonatomic) float activeRate;
- (double)displayTimeFromTime:(double)arg1;	// IMP=0x0000000000e70ff0
- (double)timeFromDisplayTime:(double)arg1;	// IMP=0x0000000000e70fe0
@property(readonly, nonatomic) AVTimeRange *timeRangeForNavigation;
@property(readonly, nonatomic) _Bool isContentDurationIndefinite;
- (_Bool)isAtMaxTime;	// IMP=0x0000000000e70f10
@property(readonly, nonatomic) AVTimeRange *displayTimeRangeForNavigation;
- (double)currentTime;	// IMP=0x0000000000e70ec0
@property(readonly, nonatomic) NSDate *currentOrEstimatedDate;
@property(readonly, nonatomic) double currentDisplayTime;
@property(readonly, nonatomic) double contentDurationCached;
@property(readonly) double displayedDuration;
@property(readonly) long long timeControlStatus;
@property(readonly) NSArray *externalMetadata;
@property(readonly) double timebaseRate;
@property(readonly) NSValue *overrideForReversePlaybackEndTime;
@property(readonly) NSValue *overrideForForwardPlaybackEndTime;
@property(readonly) _Bool isPlaybackLikelyToKeepUp;
- (_Bool)hasItem;	// IMP=0x0000000000e70d40
@property(readonly, nonatomic) AVTimeRange *timeRangeSeekable;
@property(readonly, nonatomic) _Bool hasStartAndEndDates;
@property(readonly, nonatomic) _Bool isSeekingTV;
@property(readonly, nonatomic) CDStruct_198678f7 backwardPlaybackEndTime;
@property(readonly, nonatomic) CDStruct_198678f7 forwardPlaybackEndTime;
- (_Bool)effectiveRateNonZero;	// IMP=0x0000000000e70ab0
- (_Bool)hasSeekableLiveStreamingContent;	// IMP=0x0000000000e708f0
- (void)updateMinMaxTiming;	// IMP=0x0000000000e704e0
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000000e701b0
- (void)volumeChanged:(double)arg1;	// IMP=0x0000000000e70160
@property double volume;
- (void)toggleMuted:(id)arg1;	// IMP=0x0000000000e70070
@property(getter=isMuted) _Bool muted;
@property(getter=isPictureInPictureInterrupted) _Bool pictureInPictureInterrupted;
@property(readonly, getter=isPictureInPicturePossible) _Bool pictureInPicturePossible;
- (void)setAllowsPictureInPicture:(_Bool)arg1;	// IMP=0x0000000000e6ff90
@property(readonly, getter=isPlayingOnExternalScreen) _Bool playingOnExternalScreen;
@property(retain) WebAVMediaSelectionOption *currentLegibleMediaSelectionOption;
@property(retain) WebAVMediaSelectionOption *currentAudioMediaSelectionOption;
@property(readonly) _Bool hasLegibleMediaSelectionOptions;
@property(readonly) _Bool hasAudioMediaSelectionOptions;
@property(readonly) _Bool hasMediaSelectionOptions;
@property(readonly) _Bool canSeekFrameForward;
@property(readonly) _Bool canSeekFrameBackward;
- (void)seekChapterForward:(id)arg1;	// IMP=0x0000000000e6fbf0
- (void)seekToEnd:(id)arg1;	// IMP=0x0000000000e6fba0
@property(readonly) _Bool canSeekToEnd;
- (void)seekChapterBackward:(id)arg1;	// IMP=0x0000000000e6f900
- (void)seekToBeginning:(id)arg1;	// IMP=0x0000000000e6f8b0
@property(readonly) _Bool canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;	// IMP=0x0000000000e6f630
- (void)beginScanningBackward:(id)arg1;	// IMP=0x0000000000e6f5f0
- (void)endScanningForward:(id)arg1;	// IMP=0x0000000000e6f5b0
- (void)beginScanningForward:(id)arg1;	// IMP=0x0000000000e6f570
@property(readonly) _Bool canScanForward;
@property(readonly) double seekToTime;
@property(readonly) _Bool isSeeking;
@property(readonly) _Bool isScrubbing;
- (void)gotoEndOfSeekableRanges:(id)arg1;	// IMP=0x0000000000e6f2b0
- (void)skipBackwardThirtySeconds:(id)arg1;	// IMP=0x0000000000e6f020
@property(readonly) double minTime;
@property(readonly) double maxTime;
- (_Bool)hasLiveStreamingContent;	// IMP=0x0000000000e6ee00
- (void)setCurrentTimeWithinEndTimes:(double)arg1;	// IMP=0x0000000000e6edc0
- (double)currentTimeWithinEndTimes;	// IMP=0x0000000000e6ed90
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;	// IMP=0x0000000000e6ed20
- (void)seekByTimeInterval:(double)arg1;	// IMP=0x0000000000e6ed00
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;	// IMP=0x0000000000e6ec90
- (void)seekToTime:(double)arg1;	// IMP=0x0000000000e6ec20
- (void)endScrubbing:(id)arg1;	// IMP=0x0000000000e6ebd0
- (void)beginScrubbing:(id)arg1;	// IMP=0x0000000000e6eb80
- (void)setRate:(double)arg1 fromJavaScript:(_Bool)arg2;	// IMP=0x0000000000e6ea50
@property double rate;
- (void)setDefaultPlaybackRate:(double)arg1 fromJavaScript:(_Bool)arg2;	// IMP=0x0000000000e6e910
@property double defaultPlaybackRate;
@property void *playbackSessionInterface;
@property void *delegate;
@property(getter=isPlaying) _Bool playing;
- (void)togglePlaybackEvenWhenInBackground:(id)arg1;	// IMP=0x0000000000e6e6b0
- (void)togglePlayback:(id)arg1;	// IMP=0x0000000000e6e640
- (void)pause:(id)arg1;	// IMP=0x0000000000e6e600
- (void)play:(id)arg1;	// IMP=0x0000000000e6e5c0
- (id)forwardingTargetForSelector:(SEL)arg1;	// IMP=0x0000000000e6e5a0
- (id)currentItem;	// IMP=0x0000000000e6e580
- (id)player;	// IMP=0x0000000000e6e570
- (void)dealloc;	// IMP=0x0000000000e6e470
- (id)init;	// IMP=0x0000000000e6e1b0

@end

