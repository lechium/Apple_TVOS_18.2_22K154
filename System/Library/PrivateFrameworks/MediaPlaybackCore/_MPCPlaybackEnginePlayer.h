//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVPlayerViewController, MPAVItem, MPCAVItemTrace, MPCExternalPlaybackController, MPCItemBookmarker, MPCLeaseController, MPCMediaFoundationTranslator, MPCPlaybackEngine, MPCPlaybackErrorController, MPCPlayerItemConfigurator, MRCriticalSectionToken, NSDictionary, NSNumber, NSString, _MPCAudioSessionController;
@protocol MFAssetLoading, MFPlaybackStackController><MFQueueManagement, MPCPlaybackEngineEventStreamDeferralAssertion;

__attribute__((visibility("hidden")))
@interface _MPCPlaybackEnginePlayer : NSObject
{
    _Bool _autoPlayWhenLikelyToKeepUp;	// 8 = 0x8
    _Bool _reloadingPlaybackContext;	// 9 = 0x9
    _Bool _lastReportedVocalAttenuationEnabledState;	// 10 = 0xa
    MPCPlaybackEngine *_playbackEngine;	// 16 = 0x10
    long long _jumpIdentifier;	// 24 = 0x18
    MRCriticalSectionToken *_criticalSectionToken;	// 32 = 0x20
    id <MFPlaybackStackController><MFQueueManagement> _playbackStackController;	// 40 = 0x28
    MPCItemBookmarker *_bookmarker;	// 48 = 0x30
    MPCMediaFoundationTranslator *_translator;	// 56 = 0x38
    MPCPlaybackErrorController *_errorController;	// 64 = 0x40
    MPCExternalPlaybackController *_externalPlaybackController;	// 72 = 0x48
    id <MFAssetLoading> _assetLoader;	// 80 = 0x50
    MPCLeaseController *_leaseController;	// 88 = 0x58
    MPCPlayerItemConfigurator *_configurator;	// 96 = 0x60
    unsigned long long _stateHandle;	// 104 = 0x68
    MPCAVItemTrace *_playbackStartTrace;	// 112 = 0x70
    _MPCAudioSessionController *_transientAudioSessionController;	// 120 = 0x78
    id <MPCPlaybackEngineEventStreamDeferralAssertion> _evsDeferralAssertionForFirstAudioFrame;	// 128 = 0x80
    NSNumber *_currentRelativeVolume;	// 136 = 0x88
    long long _applicationMusicPlayerTransitionType;	// 144 = 0x90
    double _applicationMusicPlayerCrossFadeDuration;	// 152 = 0x98
}

+ (id)describePlayer:(id)arg1;	// IMP=0x0010000000177d21
- (void).cxx_destruct;	// IMP=0x000000000011e20f
@property(nonatomic) double applicationMusicPlayerCrossFadeDuration; // @synthesize applicationMusicPlayerCrossFadeDuration=_applicationMusicPlayerCrossFadeDuration;
@property(nonatomic) long long applicationMusicPlayerTransitionType; // @synthesize applicationMusicPlayerTransitionType=_applicationMusicPlayerTransitionType;
@property(nonatomic) _Bool lastReportedVocalAttenuationEnabledState; // @synthesize lastReportedVocalAttenuationEnabledState=_lastReportedVocalAttenuationEnabledState;
@property(copy, nonatomic) NSNumber *currentRelativeVolume; // @synthesize currentRelativeVolume=_currentRelativeVolume;
@property(retain, nonatomic) id <MPCPlaybackEngineEventStreamDeferralAssertion> evsDeferralAssertionForFirstAudioFrame; // @synthesize evsDeferralAssertionForFirstAudioFrame=_evsDeferralAssertionForFirstAudioFrame;
@property(retain, nonatomic) _MPCAudioSessionController *transientAudioSessionController; // @synthesize transientAudioSessionController=_transientAudioSessionController;
@property(retain, nonatomic) MPCAVItemTrace *playbackStartTrace; // @synthesize playbackStartTrace=_playbackStartTrace;
@property(nonatomic) unsigned long long stateHandle; // @synthesize stateHandle=_stateHandle;
@property(retain, nonatomic) MPCPlayerItemConfigurator *configurator; // @synthesize configurator=_configurator;
@property(retain, nonatomic) MPCLeaseController *leaseController; // @synthesize leaseController=_leaseController;
@property(retain, nonatomic) id <MFAssetLoading> assetLoader; // @synthesize assetLoader=_assetLoader;
@property(retain, nonatomic) MPCExternalPlaybackController *externalPlaybackController; // @synthesize externalPlaybackController=_externalPlaybackController;
@property(retain, nonatomic) MPCPlaybackErrorController *errorController; // @synthesize errorController=_errorController;
@property(retain, nonatomic) MPCMediaFoundationTranslator *translator; // @synthesize translator=_translator;
@property(retain, nonatomic) MPCItemBookmarker *bookmarker; // @synthesize bookmarker=_bookmarker;
@property(retain, nonatomic) id <MFPlaybackStackController><MFQueueManagement> playbackStackController; // @synthesize playbackStackController=_playbackStackController;
@property(retain, nonatomic) MRCriticalSectionToken *criticalSectionToken; // @synthesize criticalSectionToken=_criticalSectionToken;
@property(nonatomic) long long jumpIdentifier; // @synthesize jumpIdentifier=_jumpIdentifier;
@property(readonly, nonatomic, getter=isReloadingPlaybackContext) _Bool reloadingPlaybackContext; // @synthesize reloadingPlaybackContext=_reloadingPlaybackContext;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp; // @synthesize autoPlayWhenLikelyToKeepUp=_autoPlayWhenLikelyToKeepUp;
@property(readonly, nonatomic) __weak MPCPlaybackEngine *playbackEngine; // @synthesize playbackEngine=_playbackEngine;
- (void)donateMetricsToPlayerItem:(id)arg1;	// IMP=0x000000000011df1d
- (void)invalidateEVSDeferralAssertionForFirstAudioFrame;	// IMP=0x000000000011deb4
- (void)takeEVSDeferralAssertionForFirstAudioFrame;	// IMP=0x000000000011ddd4
- (void)assetLoadingDidStartForItem:(id)arg1;	// IMP=0x000000000011d98a
- (void)assetLoadingDidCompleteForItem:(id)arg1 error:(id)arg2;	// IMP=0x000000000011cd01
- (void)renderingModeDidChange:(long long)arg1 timeStamp:(id)arg2;	// IMP=0x000000000011cb28
- (void)itemIsReadyForMetrics:(id)arg1 accessLog:(id)arg2;	// IMP=0x000000000011c2b4
- (void)didPerformPlayerOperationWithPlayerIdentifier:(id)arg1 items:(id)arg2 operation:(id)arg3;	// IMP=0x000000000011c131
- (void)willPerformPlayerOperationWithPlayerIdentifier:(id)arg1 operation:(id)arg2 reason:(id)arg3;	// IMP=0x000000000011bfee
- (void)stackControllerDidCancelTransitionFrom:(id)arg1 to:(id)arg2 type:(long long)arg3 reason:(id)arg4;	// IMP=0x000000000011bd3f
- (void)stackControllerDidCreateTransitionFrom:(id)arg1 to:(id)arg2 type:(long long)arg3 parameters:(id)arg4;	// IMP=0x000000000011ba90
- (void)errorResolutionDidEndForItem:(id)arg1 error:(id)arg2 resolution:(long long)arg3;	// IMP=0x000000000011b924
- (void)errorResolutionDidStartForItem:(id)arg1 error:(id)arg2;	// IMP=0x000000000011b7f3
- (void)didReportSignpostWithType:(long long)arg1;	// IMP=0x000000000011b77f
- (void)relativeVolumeDidChangeTo:(float)arg1 timeStamp:(id)arg2;	// IMP=0x000000000011b57a
- (void)firstVideoFrameWasRenderedForItem:(id)arg1 timeStamp:(id)arg2;	// IMP=0x000000000011afa8
- (void)playbackIsBlockedOnNonPlayableItem:(id)arg1;	// IMP=0x000000000011ae35
- (void)mediaServicesPurgeDidOccurWithTimeStamp:(id)arg1;	// IMP=0x000000000011aacc
- (void)mediaServicesInterruptionDidEndWithTimeStamp:(id)arg1;	// IMP=0x000000000011a756
- (void)mediaServicesInterruptionDidBeginWithItemAtDeath:(id)arg1 timeAtDeath:(double)arg2 timeStamp:(id)arg3;	// IMP=0x000000000011a237
- (void)userActionDidEnd:(id)arg1 error:(id)arg2;	// IMP=0x0000000000119f9d
- (void)userActionDidBegin:(id)arg1;	// IMP=0x0000000000119b40
- (void)didReachEndOfQueueWithReason:(id)arg1;	// IMP=0x00000000001198f6
- (void)screenRecordingDidChange:(_Bool)arg1 timeStamp:(id)arg2;	// IMP=0x00000000001196e6
- (void)tracksDidChangeForItem:(id)arg1 timeStamp:(id)arg2;	// IMP=0x00000000001194f4
- (void)playbackIsLikelyToKeepUp:(_Bool)arg1 forItem:(id)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000118bcf
- (void)playbackBufferStateDidChangeToState:(long long)arg1 forItem:(id)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000118277
- (void)interruptionDidFinishForInterruptor:(id)arg1 shouldResume:(_Bool)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000117fa3
- (void)interruptionDidBeginWithInterruptor:(id)arg1 timeStamp:(id)arg2;	// IMP=0x0000000000117d48
- (void)stateDidChangeFromState:(long long)arg1 toState:(long long)arg2 timeStamp:(id)arg3;	// IMP=0x000000000011780e
- (void)routeDidChange:(_Bool)arg1 metadata:(id)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000117346
- (void)playbackWaitingToPlayForItem:(id)arg1 reason:(id)arg2 timeStamp:(id)arg3;	// IMP=0x00000000001170f1
- (void)timeControlStatusDidChange:(long long)arg1 waitingReason:(id)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000116ddd
- (void)firstFrameWillRenderForItem:(id)arg1 timeStamp:(id)arg2;	// IMP=0x00000000001166fa
- (void)effectiveRateDidChangeTo:(float)arg1 forItem:(id)arg2 timeStamp:(id)arg3;	// IMP=0x00000000001164a7
- (void)playbackRateDidChangeNotifiedForItem:(id)arg1 newRate:(float)arg2 reason:(id)arg3 participantIdentifier:(id)arg4 timeStamp:(id)arg5;	// IMP=0x0000000000115dc6
- (void)playbackRateDidChangeToRate:(float)arg1 forItem:(id)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000115b60
- (void)playbackDidStopForItem:(id)arg1 source:(id)arg2 reason:(id)arg3 timeStamp:(id)arg4;	// IMP=0x000000000011589f
- (void)playbackDidStartForItem:(id)arg1 rate:(float)arg2 fromStalling:(_Bool)arg3 timeStamp:(id)arg4;	// IMP=0x0000000000114a76
- (double)_adjustPlayerTimeForAudioTapProcessing:(double)arg1;	// IMP=0x0000000000114936
- (void)_updateActiveFormatForQueueItem:(id)arg1;	// IMP=0x0000000000114600
- (void)itemIsReadyToPlay:(id)arg1 timeStamp:(id)arg2;	// IMP=0x00000000001140da
- (void)itemDidPlayToEnd:(id)arg1 timeStamp:(id)arg2;	// IMP=0x0000000000113e55
- (void)itemDidFailToPlayToEnd:(id)arg1 error:(id)arg2 timeStamp:(id)arg3;	// IMP=0x000000000011381e
- (void)itemDidFailToLoad:(id)arg1 silently:(_Bool)arg2 error:(id)arg3 timeStamp:(id)arg4;	// IMP=0x0000000000113587
- (void)userSeekCompletedForItem:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 timeStamp:(id)arg4;	// IMP=0x000000000011323e
- (void)playbackTimeDidChangeTo:(double)arg1 forItem:(id)arg2 reason:(long long)arg3 timeStamp:(id)arg4;	// IMP=0x000000000011274b
- (void)playbackDidReachQueueEndWithTimeStamp:(id)arg1;	// IMP=0x00000000001125bd
- (void)overlappedPlaybackDidEndFrom:(id)arg1 to:(id)arg2 transitionTime:(id)arg3 transitionType:(long long)arg4 timeStamp:(id)arg5;	// IMP=0x0000000000111b80
- (void)overlappedPlaybackWillBeginFrom:(id)arg1 to:(id)arg2 transitionTime:(id)arg3 transitionType:(long long)arg4 timeStamp:(id)arg5;	// IMP=0x0000000000111043
- (void)itemDidResignCurrent:(id)arg1 source:(long long)arg2 timeStamp:(id)arg3;	// IMP=0x0000000000110c24
- (void)itemDidBecomeCurrent:(id)arg1 source:(long long)arg2 timeStamp:(id)arg3;	// IMP=0x00000000001102f5
- (void)currentItemWillChangeFromItem:(id)arg1 toItem:(id)arg2 source:(long long)arg3 timeStamp:(id)arg4;	// IMP=0x000000000010fd54
- (void)engine:(id)arg1 didChangeQueueWithReason:(id)arg2;	// IMP=0x000000000010fc56
- (void)engine:(id)arg1 didChangeQueueController:(id)arg2;	// IMP=0x000000000010f841
- (void)engine:(id)arg1 willRemoveQueueController:(id)arg2;	// IMP=0x000000000010f7b1
- (_Bool)_itemConfigurationIsIncompatibleWithVocalAttenuationState:(id)arg1;	// IMP=0x000000000010f75d
- (void)_performSkipForUserAction:(id)arg1;	// IMP=0x000000000010f4f8
- (_Bool)_isAVKitSkipAction:(id)arg1;	// IMP=0x000000000010f46d
- (void)_playbackDidStopForItem:(id)arg1 source:(id)arg2 reason:(id)arg3 time:(double)arg4;	// IMP=0x000000000010f017
- (id)_MPAVItemForMFQueuePlayerItem:(id)arg1;	// IMP=0x000000000010eefd
- (void)_logTimeJumpForItem:(id)arg1 fromTime:(double)arg2 toTime:(double)arg3 userInitiated:(_Bool)arg4 timeStamp:(id)arg5;	// IMP=0x000000000010e7d2
@property(readonly, nonatomic) NSDictionary *_stateDictionary;
- (void)_setupPlaybackStackWithPlaybackEngine:(id)arg1;	// IMP=0x000000000010de57
@property(nonatomic) float relativeVolume;
- (void)jumpToTime:(double)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010db00
- (void)setRate:(float)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010d8de
- (void)endScanningWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010d724
- (void)togglePlaybackWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010d2b5
- (void)pauseForLeasePreventionWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010d0ea
- (void)pauseForSleepTimerWithFadeout:(double)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010cf15
- (void)pauseWithFadeout:(double)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010cd40
- (void)pauseWithIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010cb75
- (void)playWithRate:(float)arg1 identifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010c9aa
@property(readonly, nonatomic) _Bool hasPlayedSuccessfully;
@property(readonly, nonatomic) AVPlayerViewController *playerViewController;
@property(readonly, nonatomic) long long stateBeforeInterruption;
@property(readonly, nonatomic) long long state;
@property(readonly, nonatomic) float currentRate;
@property(readonly, nonatomic) double currentTime;
@property(readonly, nonatomic) MPAVItem *currentItem;
- (void)updateAudioSession;	// IMP=0x000000000010c58f
- (void)updateAudioSessionSpeechDetection;	// IMP=0x000000000010c512
- (void)setApplicationMusicPlayerTransitionType:(long long)arg1 withDuration:(double)arg2;	// IMP=0x000000000010c49a
- (void)deactivateAudioSessionIfIdle:(long long)arg1;	// IMP=0x000000000010c44e
- (void)becomeActiveWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000010c2a1
- (void)finalizeStateRestoreWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000010c152
- (void)finalizeSetQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010b91b
- (void)reloadItemsKeepingCurrentItem:(_Bool)arg1 allowReuse:(_Bool)arg2;	// IMP=0x000000000010b8cc
- (void)setupPlaybackStackIfNeeded;	// IMP=0x000000000010b77b
- (void)prewarm;	// IMP=0x000000000010b730
- (void)dealloc;	// IMP=0x000000000010b6f6
- (id)initWithPlaybackEngine:(id)arg1;	// IMP=0x000000000010b5e8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

