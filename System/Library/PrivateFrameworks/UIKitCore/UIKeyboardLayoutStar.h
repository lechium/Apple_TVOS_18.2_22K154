//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "UIKeyboardLayout.h"

@class CADisplayLink, NSArray, NSDate, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, TUIKeyplaneView, UIButton, UIDelayedAction, UIGestureKeyboardIntroduction, UIImageView, UIKBBackgroundView, UIKBKeyViewAnimator, UIKBKeyplaneView, UIKBRenderConfig, UIKBResizingKeyplaneCoordinator, UIKBTree, UIKeyboardEmojiKeyDisplayController, UIKeyboardPathEffectView, UIKeyboardPinchGestureRecognizer, UIKeyboardSplitTransitionView, UISwipeGestureRecognizer, UIView, _UIKeyboardTypingSpeedLogger;
@protocol UIKeyboardKeyplaneTransitionDelegate, UIKeyboardLayoutStarDelegate, UITextCursorAssertion;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar : UIKeyboardLayout
{
    UIKBTree *_keyboard;	// 224 = 0xe0
    UIKBTree *_keyplane;	// 232 = 0xe8
    NSString *_keyboardName;	// 240 = 0xf0
    NSString *_keyplaneName;	// 248 = 0xf8
    long long _appearance;	// 256 = 0x100
    UIKBTree *_activeKey;	// 264 = 0x108
    UIKBTree *_inactiveLanguageIndicator;	// 272 = 0x110
    UIKBKeyplaneView *_keyplaneView;	// 280 = 0x118
    UIKBBackgroundView *_backgroundView;	// 288 = 0x120
    UIKBKeyViewAnimator *_keyViewAnimator;	// 296 = 0x128
    UIKeyboardEmojiKeyDisplayController *_emojiKeyManager;	// 304 = 0x130
    double _prevTouchUpTime;	// 312 = 0x138
    double _prevTouchUpFinishedTime;	// 320 = 0x140
    double _prevTouchDownTime;	// 328 = 0x148
    unsigned long long _prevUpActions;	// 336 = 0x150
    NSMutableDictionary *_keyboards;	// 344 = 0x158
    NSMutableDictionary *_allKeyplaneViews;	// 352 = 0x160
    NSMutableSet *_allKeyplaneKeycaps;	// 360 = 0x168
    NSMutableSet *_validInputStrings;	// 368 = 0x170
    NSString *_localizedInputKey;	// 376 = 0x178
    int _preferredTrackingChangeCount;	// 384 = 0x180
    int _shiftTrackingChangeCount;	// 388 = 0x184
    NSMutableSet *_accentInfo;	// 392 = 0x188
    NSMutableSet *_hasAccents;	// 400 = 0x190
    id _spaceTarget;	// 408 = 0x198
    SEL _spaceAction;	// 416 = 0x1a0
    SEL _spaceLongAction;	// 424 = 0x1a8
    id _returnTarget;	// 432 = 0x1b0
    SEL _returnAction;	// 440 = 0x1b8
    SEL _returnLongAction;	// 448 = 0x1c0
    id _deleteTarget;	// 456 = 0x1c8
    SEL _deleteAction;	// 464 = 0x1d0
    SEL _deleteLongAction;	// 472 = 0x1d8
    _Bool _shift;	// 480 = 0x1e0
    _Bool _autoshift;	// 481 = 0x1e1
    _Bool _settingShift;	// 482 = 0x1e2
    _Bool _holdingShift;	// 483 = 0x1e3
    _Bool _didLongPress;	// 484 = 0x1e4
    NSString *_preTouchKeyplaneName;	// 488 = 0x1e8
    _Bool _revertKeyplaneAfterTouch;	// 496 = 0x1f0
    _Bool _wasShifted;	// 497 = 0x1f1
    _Bool _swipeDetected;	// 498 = 0x1f2
    _Bool _showIntlKey;	// 499 = 0x1f3
    _Bool _showDictationKey;	// 500 = 0x1f4
    _Bool _suppressDeactivateKeys;	// 501 = 0x1f5
    _Bool _suppressShiftKeyplaneAnimation;	// 502 = 0x1f6
    _Bool _isTrackpadMode;	// 503 = 0x1f7
    _Bool _shiftLockReady;	// 504 = 0x1f8
    double _shiftLockFirstTapTime;	// 512 = 0x200
    UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 520 = 0x208
    UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 528 = 0x210
    UISwipeGestureRecognizer *_upSwipeRecognizer;	// 536 = 0x218
    UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;	// 544 = 0x220
    UIKeyboardSplitTransitionView *_transitionView;	// 552 = 0x228
    double _initialSplitProgress;	// 560 = 0x230
    double _finalSplitProgress;	// 568 = 0x238
    double _autoSplitLastUpdate;	// 576 = 0x240
    double _autoSplitElapsedTime;	// 584 = 0x248
    CADisplayLink *_displayLink;	// 592 = 0x250
    _Bool _ghostKeysEnabled;	// 600 = 0x258
    UIDelayedAction *_delayedCentroidUpdate;	// 608 = 0x260
    _Bool _isRebuilding;	// 616 = 0x268
    long long _currentHandBias;	// 624 = 0x270
    NSString *_layoutTag;	// 632 = 0x278
    _Bool _preRotateShift;	// 640 = 0x280
    NSString *_preRotateKeyplaneName;	// 648 = 0x288
    _Bool _preRotateTrackpadMode;	// 656 = 0x290
    UIDelayedAction *_multitapAction;	// 664 = 0x298
    _Bool _unshiftAfterMultitap;	// 672 = 0x2a0
    int _multitapCount;	// 676 = 0x2a4
    UIKBTree *_multitapKey;	// 680 = 0x2a8
    UIView *_flickPopupView;	// 688 = 0x2b0
    NSMutableDictionary *_compositeImages;	// 696 = 0x2b8
    NSTimer *_flickPopuptimer;	// 704 = 0x2c0
    id _touchInfo;	// 712 = 0x2c8
    UIView *_dimKeyboardImageView;	// 720 = 0x2d0
    _Bool _keyboardImageViewIsDim;	// 728 = 0x2d8
    _Bool _isOutOfBounds;	// 729 = 0x2d9
    UIDelayedAction *_dismissModalDoubleConsonantKeys;	// 736 = 0x2e0
    _Bool _inDealloc;	// 744 = 0x2e8
    NSMutableSet *_keysUnderIndicator;	// 752 = 0x2f0
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;	// 760 = 0x2f8
    UIKBRenderConfig *_passcodeRenderConfig;	// 768 = 0x300
    long long _setKeyplaneViewCount;	// 776 = 0x308
    _Bool _inputTraitsPreventInitialReuse;	// 784 = 0x310
    _Bool _settingFloat;	// 785 = 0x311
    NSMutableSet *_leftKeySet;	// 792 = 0x318
    NSMutableSet *_rightKeySet;	// 800 = 0x320
    struct CGPoint _leftDriftOffset;	// 808 = 0x328
    struct CGPoint _rightDriftOffset;	// 824 = 0x338
    NSMutableArray *_leftSideReachability;	// 840 = 0x348
    NSMutableArray *_rightSideReachability;	// 848 = 0x350
    NSNumber *_homeRowHint;	// 856 = 0x358
    double _touchDownTimeSpan;	// 864 = 0x360
    NSDate *_prevTouchMoreKeyTime;	// 872 = 0x368
    NSDate *_prevProgressiveCandidateRequestTime;	// 880 = 0x370
    NSTimer *_progressiveCandidateUpdateTimer;	// 888 = 0x378
    NSString *_lastInputMode;	// 896 = 0x380
    _Bool _pendingDictationReload;	// 904 = 0x388
    _Bool _hasPeekedGestureKey;	// 905 = 0x389
    _Bool _lastInputIsGestureKey;	// 906 = 0x38a
    UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;	// 912 = 0x390
    _Bool _dictationUsingServerManualEndpointing;	// 920 = 0x398
    _Bool _splitTransitionNeedsRebuild;	// 921 = 0x399
    _Bool _selectedVariantIndexChanged;	// 922 = 0x39a
    NSMutableDictionary *_extendedTouchInfoMap;	// 928 = 0x3a0
    UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;	// 936 = 0x3a8
    UIButton *_biasEscapeButton;	// 944 = 0x3b0
    NSLayoutConstraint *_biasEscapeButtonLeftConstraint;	// 952 = 0x3b8
    NSLayoutConstraint *_biasEscapeButtonRightConstraint;	// 960 = 0x3c0
    NSMutableSet *_keyplaneTransformations;	// 968 = 0x3c8
    UIImageView *_pathEffectGlowView;	// 976 = 0x3d0
    UIKeyboardPathEffectView *_pathEffectView;	// 984 = 0x3d8
    NSArray *_pathEffectViewConstraints;	// 992 = 0x3e0
    _Bool _isContinuousPathUnderway;	// 1000 = 0x3e8
    UIView *_keyplaneTransformationAreaView;	// 1008 = 0x3f0
    _Bool _externalDictationAndInternationalKeys;	// 1016 = 0x3f8
    NSString *_dictationReplacementKeycap;	// 1024 = 0x400
    _Bool _showsPunctuationKeysOnPrimaryKeyplane;	// 1032 = 0x408
    TUIKeyplaneView *_liveKeyplaneView;	// 1040 = 0x410
    _Bool _layoutSupportsCrescendo;	// 1048 = 0x418
    NSArray *_liveKeyplaneConstraints;	// 1056 = 0x420
    _Bool _preventPaddlesForPointerTouches;	// 1064 = 0x428
    _Bool _muteNextKeyClickSound;	// 1065 = 0x429
    int playKeyClickSoundOn;	// 1068 = 0x42c
    UIKBRenderConfig *_renderConfig;	// 1072 = 0x430
    UIView *_modalDisplayView;	// 1080 = 0x438
    id <UIKeyboardLayoutStarDelegate> _delegate;	// 1088 = 0x440
    double _lastTwoFingerTapTimestamp;	// 1096 = 0x448
    id <UITextCursorAssertion> _blinkAssertion;	// 1104 = 0x450
    id <UIKeyboardKeyplaneTransitionDelegate> _splitKeyplaneTransitionDelegate;	// 1112 = 0x458
}

+ (id)sharedPunctuationCharacterSet;	// IMP=0x0010000000d47107
+ (id)sharedRivenKeyplaneGenerator;	// IMP=0x0010000000d240e2
+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;	// IMP=0x0010000000d1e16c
+ (id)keyboardWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0010000000d1dea1
+ (id)keyboardFromFactoryWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0010000000d1dbd6
+ (void)accessibilitySensitivityChanged;	// IMP=0x0010000000d1d296
+ (Class)_subclassForScreenTraits:(id)arg1;	// IMP=0x0010000000d1cbb9
- (void).cxx_destruct;	// IMP=0x0000000000d5a85f
@property(nonatomic) __weak id <UIKeyboardKeyplaneTransitionDelegate> splitKeyplaneTransitionDelegate; // @synthesize splitKeyplaneTransitionDelegate=_splitKeyplaneTransitionDelegate;
@property(retain, nonatomic) id <UITextCursorAssertion> blinkAssertion; // @synthesize blinkAssertion=_blinkAssertion;
@property(nonatomic) _Bool muteNextKeyClickSound; // @synthesize muteNextKeyClickSound=_muteNextKeyClickSound;
@property(nonatomic) _Bool preventPaddlesForPointerTouches; // @synthesize preventPaddlesForPointerTouches=_preventPaddlesForPointerTouches;
@property(nonatomic) double lastTwoFingerTapTimestamp; // @synthesize lastTwoFingerTapTimestamp=_lastTwoFingerTapTimestamp;
@property(nonatomic) __weak id <UIKeyboardLayoutStarDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UIView *modalDisplayView; // @synthesize modalDisplayView=_modalDisplayView;
@property(retain, nonatomic) UIKBRenderConfig *renderConfig; // @synthesize renderConfig=_renderConfig;
@property(copy, nonatomic) NSString *preTouchKeyplaneName; // @synthesize preTouchKeyplaneName=_preTouchKeyplaneName;
@property(nonatomic) int playKeyClickSoundOn; // @synthesize playKeyClickSoundOn;
@property(copy, nonatomic) NSString *localizedInputKey; // @synthesize localizedInputKey=_localizedInputKey;
@property(readonly, nonatomic) _Bool showsDictationKey; // @synthesize showsDictationKey=_showDictationKey;
@property(readonly, nonatomic) _Bool showsInternationalKey; // @synthesize showsInternationalKey=_showIntlKey;
@property(nonatomic) _Bool didLongPress; // @synthesize didLongPress=_didLongPress;
@property(nonatomic) _Bool autoShift; // @synthesize autoShift=_autoshift;
@property(nonatomic) _Bool shift; // @synthesize shift=_shift;
@property(retain, nonatomic) UIKBTree *activeKey; // @synthesize activeKey=_activeKey;
@property(copy, nonatomic) NSString *keyplaneName; // @synthesize keyplaneName=_keyplaneName;
@property(copy, nonatomic) NSString *keyboardName; // @synthesize keyboardName=_keyboardName;
@property(readonly, nonatomic) UIKBTree *keyplane; // @synthesize keyplane=_keyplane;
@property(readonly, nonatomic) UIKBTree *keyboard; // @synthesize keyboard=_keyboard;
- (void)typingStyleEstimator:(id)arg1 didChangeTypingStyleEstimate:(unsigned long long)arg2;	// IMP=0x0000000000d5a4d4
- (void)triggerSpaceKeyplaneSwitchIfNecessary;	// IMP=0x0000000000d5a394
- (_Bool)is10KeyRendering;	// IMP=0x0000000000d5a31c
- (_Bool)isEmojiKeyplane;	// IMP=0x0000000000d5a2c1
- (_Bool)keyplaneContainsEmojiKey;	// IMP=0x0000000000d5a23b
- (_Bool)keyplaneContainsDismissKey;	// IMP=0x0000000000d5a1f6
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)arg1;	// IMP=0x0000000000d5a078
- (id)currentKeyplaneView;	// IMP=0x0000000000d5a063
- (id)currentKeyplane;	// IMP=0x0000000000d5a04e
- (void)fadeWithInvocation:(id)arg1;	// IMP=0x0000000000d59f1e
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(_Bool)arg3 baseKeyForVariants:(_Bool)arg4;	// IMP=0x0000000000d59bc4
- (id)simulateTouch:(struct CGPoint)arg1;	// IMP=0x0000000000d59a36
- (struct CGPoint)applyError:(struct CGPoint)arg1 toKey:(id)arg2;	// IMP=0x0000000000d597cc
- (void)switchKeyplane:(id)arg1;	// IMP=0x0000000000d59701
- (void)changeToKeyplane:(id)arg1;	// IMP=0x0000000000d59633
- (id)keyplaneNamed:(id)arg1;	// IMP=0x0000000000d595b9
- (id)keyplaneForKey:(id)arg1;	// IMP=0x0000000000d5953f
- (id)baseKeyForString:(id)arg1;	// IMP=0x0000000000d58c75
- (_Bool)shouldRetestKey:(id)arg1 slidOffKey:(id)arg2 withKeyplane:(id)arg3;	// IMP=0x0000000000d58b99
- (_Bool)shouldRetestTouchDraggedFromKey:(id)arg1;	// IMP=0x0000000000d58b84
- (void)didRotate;	// IMP=0x0000000000d5898b
- (void)willRotate:(long long)arg1;	// IMP=0x0000000000d587d1
- (void)updateKeyCentroids;	// IMP=0x0000000000d57e07
- (void)divideKeysIntoLeft:(id)arg1 right:(id)arg2;	// IMP=0x0000000000d57735
- (_Bool)isShiftKeyBeingHeld;	// IMP=0x0000000000d5770c
- (void)setAutoshift:(_Bool)arg1;	// IMP=0x0000000000d576ce
- (void)updateUndoKeyState;	// IMP=0x0000000000d575f2
- (void)setMultitapReverseKeyState;	// IMP=0x0000000000d5744d
- (void)updateShiftKeyState;	// IMP=0x0000000000d56bd3
- (int)stateForShiftKey:(id)arg1;	// IMP=0x0000000000d5692d
- (_Bool)diacriticForwardCompose;	// IMP=0x0000000000d56906
- (_Bool)supportsContinuousPath;	// IMP=0x0000000000d568df
- (_Bool)isDynamicLayout;	// IMP=0x0000000000d568cd
- (_Bool)isKanaPlane;	// IMP=0x0000000000d568b0
- (_Bool)isAlphabeticPlane;	// IMP=0x0000000000d56889
- (_Bool)ignoresShiftState;	// IMP=0x0000000000d56862
- (_Bool)usesAutoShift;	// IMP=0x0000000000d5683b
- (void)upActionShift;	// IMP=0x0000000000d56728
- (void)downActionShiftWithKey:(id)arg1;	// IMP=0x0000000000d5641b
- (void)refreshDualStringKeys;	// IMP=0x0000000000d56284
- (unsigned long long)upActionFlagsForKey:(id)arg1;	// IMP=0x0000000000d55e78
- (unsigned long long)downActionFlagsForKey:(id)arg1;	// IMP=0x0000000000d558ba
- (_Bool)keyHasAccentedVariants:(id)arg1;	// IMP=0x0000000000d55477
- (_Bool)hasActiveContinuousPathInput;	// IMP=0x0000000000d552c8
- (id)activeTouchInfoForShift;	// IMP=0x0000000000d550a0
- (id)touchInfoForKey:(id)arg1;	// IMP=0x0000000000d54eab
- (void)clearAllTouchInfo;	// IMP=0x0000000000d54d4f
- (void)clearInfoForTouch:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x0000000000d54c67
- (void)clearInfoForTouch:(id)arg1;	// IMP=0x0000000000d54c53
- (void)cancelTouchIfNecessaryForInfo:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x0000000000d548fa
- (id)generateInfoForTouch:(id)arg1;	// IMP=0x0000000000d5481b
- (id)infoForTouch:(id)arg1;	// IMP=0x0000000000d547b9
- (id)infoForTouchUUID:(id)arg1;	// IMP=0x0000000000d54780
- (void)swipeDetected:(id)arg1;	// IMP=0x0000000000d546d0
- (void)uninstallGestureRecognizers;	// IMP=0x0000000000d54531
- (void)installGestureRecognizers;	// IMP=0x0000000000d5452b
- (void)_gestureRecognizerFailed:(id)arg1;	// IMP=0x0000000000d5450a
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x0000000000d54439
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x0000000000d542fc
- (void)touchChanged:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d5419f
- (void)touchCancelled:(id)arg1 forResting:(_Bool)arg2 executionContext:(id)arg3;	// IMP=0x0000000000d53bc8
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d53bb1
- (void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x0000000000d52b58
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x0000000000d51906
- (_Bool)shouldSendStringForFlick:(id)arg1;	// IMP=0x0000000000d5176d
- (_Bool)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint)arg1 finalPoint:(struct CGPoint)arg2;	// IMP=0x0000000000d5165d
- (void)presentModalDisplayForKey:(id)arg1;	// IMP=0x0000000000d5139a
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;	// IMP=0x0000000000d4e4bd
- (void)_recordKeystrokeStatisticForKeyPress;	// IMP=0x0000000000d4e460
- (_Bool)shouldSendTouchUpToInputManager:(id)arg1;	// IMP=0x0000000000d4e33a
- (void)handleKeyboardMenusForTouch:(id)arg1;	// IMP=0x0000000000d4df5b
- (void)touchUp:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d4d25e
- (_Bool)shouldRetestTouchUp:(id)arg1;	// IMP=0x0000000000d4ccb9
- (void)handleDelayedCentroidUpdate;	// IMP=0x0000000000d4cad9
- (void)cancelDelayedCentroidUpdate;	// IMP=0x0000000000d4caa1
- (void)refreshGhostKeyState;	// IMP=0x0000000000d4c9db
- (_Bool)performSpaceAction;	// IMP=0x0000000000d4c97a
- (_Bool)performReturnAction;	// IMP=0x0000000000d4c919
- (void)resetPanAlternativesForEndedTouch:(id)arg1;	// IMP=0x0000000000d4c886
- (void)updatePanAlternativesForTouchInfo:(id)arg1;	// IMP=0x0000000000d4c4cd
- (void)updateSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2 withPoint:(struct CGPoint)arg3;	// IMP=0x0000000000d4c09b
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;	// IMP=0x0000000000d4bf5f
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;	// IMP=0x0000000000d4a9e3
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d48feb
- (void)touchDragged:(id)arg1;	// IMP=0x0000000000d48ed9
- (_Bool)touchPassesDragThreshold:(id)arg1;	// IMP=0x0000000000d48b6a
- (_Bool)canForceTouchUUIDCommit:(id)arg1 inWindow:(id)arg2;	// IMP=0x0000000000d48a60
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d48941
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x0000000000d479ed
- (_Bool)showGestureKeyboardIntroductionIfNeeded;	// IMP=0x0000000000d47769
- (_Bool)shouldShowGestureKeyboardIntroduction;	// IMP=0x0000000000d47676
- (id)synthesizeTouchUpEventForKey:(id)arg1;	// IMP=0x0000000000d4754b
- (id)keyplaneNameForRevertAfterTouch;	// IMP=0x0000000000d474d8
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x0000000000d472ac
- (void)incrementPunctuationIfNeeded:(id)arg1;	// IMP=0x0000000000d4716c
- (_Bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1;	// IMP=0x0000000000d470ba
- (void)touchDownWithKey:(id)arg1 withTouchInfo:(id)arg2 atPoint:(struct CGPoint)arg3 executionContext:(id)arg4;	// IMP=0x0000000000d45c3a
- (void)_cleanUpBlinkAssertionIfNecessary;	// IMP=0x0000000000d45be0
- (_Bool)isKeyScriptSwitchKey:(id)arg1;	// IMP=0x0000000000d45b5a
- (_Bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0000000000d45aa0
- (void)playKeyClickSoundOnUpForKey:(id)arg1;	// IMP=0x0000000000d45a8e
- (void)playKeyClickSoundOnDownForKey:(id)arg1;	// IMP=0x0000000000d45a43
- (void)playKeyClickSoundForKey:(id)arg1;	// IMP=0x0000000000d4593e
- (void)playKeyReleaseSoundForKey:(id)arg1;	// IMP=0x0000000000d45938
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d4524d
- (void)touchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000d449ee
- (_Bool)pointInside:(struct CGPoint)arg1 forEvent:(struct __GSEvent *)arg2;	// IMP=0x0000000000d44445
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x0000000000d443f5
- (_Bool)_pointAllowedInStaticHitBuffer:(struct CGPoint)arg1;	// IMP=0x0000000000d4414a
- (double)hitBuffer;	// IMP=0x0000000000d440b9
- (struct CGRect)_paddedKeyUnionFrame;	// IMP=0x0000000000d43deb
- (_Bool)_handleTouchForEmojiInputView;	// IMP=0x0000000000d43cd3
- (void)prepareForFloatingTransition:(_Bool)arg1;	// IMP=0x0000000000d43bea
- (void)setSplit:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000d43a3a
- (void)_autoSplit:(id)arg1;	// IMP=0x0000000000d438f8
- (void)setSplitProgress:(double)arg1;	// IMP=0x0000000000d4378b
- (void)pinchHandler:(id)arg1;	// IMP=0x0000000000d436f5
- (void)pinchDidConsumeTouch:(id)arg1;	// IMP=0x0000000000d43652
- (void)didDetectPinchWithSeparation:(double)arg1;	// IMP=0x0000000000d435ad
- (_Bool)pinchCanBeginWithTouches:(id)arg1 andScale:(double)arg2;	// IMP=0x0000000000d432c5
- (_Bool)pinchSplitGestureEnabled;	// IMP=0x0000000000d43282
- (_Bool)pinchDetected;	// IMP=0x0000000000d43265
- (void)finishSplitTransitionWithProgress:(double)arg1;	// IMP=0x0000000000d43247
- (void)finishSplitTransitionWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000d42f6f
- (void)finishSplitTransition;	// IMP=0x0000000000d42f5b
- (void)finishSplitWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000d42b15
- (void)showSplitTransitionView:(_Bool)arg1;	// IMP=0x0000000000d42967
- (void)prepareForSplitTransition;	// IMP=0x0000000000d4281e
- (id)splitTransitionDelegate;	// IMP=0x0000000000d42718
- (struct CGSize)intrinsicContentSize;	// IMP=0x0000000000d426b3
- (id)hostViewForResizingKeyplane:(id)arg1;	// IMP=0x0000000000d426aa
- (void)resizeKeyplaneAndRedraw:(_Bool)arg1;	// IMP=0x0000000000d42052
- (_Bool)keyplaneSupportsResizingGesture;	// IMP=0x0000000000d42019
- (_Bool)keyplaneUsesResizingOffset;	// IMP=0x0000000000d41ee3
- (void)_didTapBiasEscapeButton:(id)arg1;	// IMP=0x0000000000d41e36
- (void)_setBiasEscapeButtonVisible:(_Bool)arg1;	// IMP=0x0000000000d4174d
- (void)setKeyboardBias:(long long)arg1;	// IMP=0x0000000000d4161c
- (long long)currentHandBias;	// IMP=0x0000000000d4154c
- (double)biasedKeyboardWidthRatio;	// IMP=0x0000000000d414cd
- (void)calculateReachabilityScoreWithKey:(id)arg1 keyError:(struct CGPoint)arg2;	// IMP=0x0000000000d40f17
- (void)resetHRRLayoutState;	// IMP=0x0000000000d40ed6
- (void)setNeedsVirtualDriftUpdate;	// IMP=0x0000000000d40e81
- (_Bool)_handRestRecognizerCancelShouldBeEnd;	// IMP=0x0000000000d40e64
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)arg1;	// IMP=0x0000000000d40a63
- (struct CGPoint)getCenterForKeyUnderRightIndexFinger;	// IMP=0x0000000000d4090f
- (struct CGPoint)getCenterForKeyUnderLeftIndexFinger;	// IMP=0x0000000000d407bb
- (void)handRestRecognizerNotifyRestForBegin:(_Bool)arg1 location:(struct CGPoint)arg2 timestamp:(double)arg3 pathIndex:(int)arg4 touchUUID:(id)arg5 context:(id)arg6;	// IMP=0x0000000000d4067d
- (CDUnknownBlockType)handRestRecognizerSilenceNextTouchDown;	// IMP=0x0000000000d40663
- (struct CGSize)handRestRecognizerStandardKeyPixelSize;	// IMP=0x0000000000d40414
- (id)handRestRecognizerGetHomeRowHint;	// IMP=0x0000000000d401e3
- (id)getSortedKeysForDisplayRowHint:(int)arg1;	// IMP=0x0000000000d3fef0
- (_Bool)handRestRecognizerShouldNeverIgnoreTouchState:(id)arg1 fromPoint:(struct CGPoint)arg2 toPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4 otherRestedTouchLocations:(id)arg5;	// IMP=0x0000000000d3fa2e
- (unsigned char)getHandRestRecognizerState;	// IMP=0x0000000000d3f7d3
- (void)layoutSubviews;	// IMP=0x0000000000d3f6d6
- (unsigned long long)targetEdgesForScreenGestureRecognition;	// IMP=0x0000000000d3f6a5
- (_Bool)shouldDeactivateWithoutWindow;	// IMP=0x0000000000d3f69d
- (void)fadeActivationIndicatorWithDuration:(double)arg1 withDelay:(double)arg2;	// IMP=0x0000000000d3f697
- (id)activationIndicatorView;	// IMP=0x0000000000d3d8d0
- (void)setHideKeysUnderIndicator:(_Bool)arg1;	// IMP=0x0000000000d3d81e
- (_Bool)shouldShowIndicator;	// IMP=0x0000000000d3d7ac
- (void)showPopupVariantsForKey:(id)arg1;	// IMP=0x0000000000d3bb19
- (void)preparePopupVariantsForKey:(id)arg1 onKeyplane:(id)arg2;	// IMP=0x0000000000d3ba2a
- (id)_variantsOfCurrencyKey:(id)arg1 language:(id)arg2;	// IMP=0x0000000000d3b799
- (id)_variantsByAppendingDualStringKey:(id)arg1 toVariants:(id)arg2;	// IMP=0x0000000000d3b3f7
- (id)_appendingSecondaryStringToVariantsTop:(id)arg1 secondaryString:(id)arg2 withDirection:(id)arg3;	// IMP=0x0000000000d3b319
- (id)_keyplaneVariantsKeyForString:(id)arg1;	// IMP=0x0000000000d3b28e
- (id)_keyboardLongPressInteractionRegions;	// IMP=0x0000000000d3afd4
- (void)longPressAction;	// IMP=0x0000000000d3a0dd
- (void)showMenu:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000d3a00b
- (_Bool)shouldShowInternationalMenuForKey:(id)arg1;	// IMP=0x0000000000d39f9e
- (_Bool)showsGlobeAndDictationKeysInDockView;	// IMP=0x0000000000d39f85
- (_Bool)isLongPressedKey:(id)arg1;	// IMP=0x0000000000d39ed2
- (_Bool)isShiftKeyPlaneChooser;	// IMP=0x0000000000d39d3e
- (_Bool)supportsSupplementalDisplayString;	// IMP=0x0000000000d39c97
- (void)restoreDefaultsForAllKeys;	// IMP=0x0000000000d39c4d
- (void)restoreDefaultsForKey:(id)arg1;	// IMP=0x0000000000d39b85
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x0000000000d39b50
- (void)setAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x0000000000d39b1b
- (void)setTarget:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000d39a92
- (void)setLabel:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000d393b9
- (void)updateLayoutTags;	// IMP=0x0000000000d38c8b
@property(retain, nonatomic) NSString *layoutTag; // @synthesize layoutTag=_layoutTag;
- (void)didClearInput;	// IMP=0x0000000000d38bd4
- (void)touchMultitapTimer;	// IMP=0x0000000000d38af6
- (void)cancelMultitapTimer;	// IMP=0x0000000000d38abe
- (_Bool)isMultitapKey:(id)arg1;	// IMP=0x0000000000d389d7
- (void)handleMultitapTimerFired;	// IMP=0x0000000000d387f7
- (void)multitapExpired;	// IMP=0x0000000000d387a5
- (void)endMultitapForKey:(id)arg1;	// IMP=0x0000000000d38784
- (void)multitapInterrupted;	// IMP=0x0000000000d38591
- (_Bool)canMultitap;	// IMP=0x0000000000d384e5
- (id)multitapForwardKeys;	// IMP=0x0000000000d384c1
- (id)multitapCompleteKeys;	// IMP=0x0000000000d3849d
- (id)activeMultitapCompleteKey;	// IMP=0x0000000000d3815e
- (_Bool)hasAccentKey;	// IMP=0x0000000000d38119
- (_Bool)hasCandidateKeys;	// IMP=0x0000000000d380d4
- (id)candidateList;	// IMP=0x0000000000d3801a
- (void)logHandwritingData;	// IMP=0x0000000000d37f4c
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;	// IMP=0x0000000000d37e67
- (void)clearHandwritingStrokesIfNeededAndNotify:(_Bool)arg1;	// IMP=0x0000000000d37d84
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 inputFlags:(int)arg3;	// IMP=0x0000000000d37702
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 touchInfo:(id)arg3 inputFlags:(int)arg4;	// IMP=0x0000000000d3762d
- (id)currentRepresentedStringForDualDisplayKey:(id)arg1;	// IMP=0x0000000000d3748b
- (void)updatePhysicalKeyboardEvent:(id)arg1 withMarkedInput:(id)arg2;	// IMP=0x0000000000d371a4
- (_Bool)isDeadkeyInput:(id)arg1;	// IMP=0x0000000000d37134
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 executionContextPassingUIKBTree:(id)arg3;	// IMP=0x0000000000d365d8
- (void)playKeyFeedbackIfNecessaryForTouchDownOnKey:(id)arg1 touchInfo:(id)arg2;	// IMP=0x0000000000d364bf
- (id)unprocessedTouchEventsForTouchInfo:(id)arg1 touchStage:(int)arg2 forcedKeyCode:(int)arg3;	// IMP=0x0000000000d36156
- (int)keycodeForKey:(id)arg1;	// IMP=0x0000000000d360e0
- (_Bool)shouldIgnoreDistantKey;	// IMP=0x0000000000d3604d
- (_Bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;	// IMP=0x0000000000d36038
- (_Bool)isGeometricShiftOrMoreKeyForTouch:(id)arg1;	// IMP=0x0000000000d35f2c
- (id)keyHitTest:(struct CGPoint)arg1;	// IMP=0x0000000000d35ea5
- (id)keyHitTestWithoutCharging:(struct CGPoint)arg1;	// IMP=0x0000000000d35d84
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1 inKeys:(id)arg2;	// IMP=0x0000000000d35a7d
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000d359fc
- (id)keyHitTestContainingPoint:(struct CGPoint)arg1;	// IMP=0x0000000000d3580d
- (id)keyViewHitTestForPoint:(struct CGPoint)arg1;	// IMP=0x0000000000d355a4
- (_Bool)shouldHitTestKey:(id)arg1;	// IMP=0x0000000000d3552b
- (void)finishSliderBehaviorFeedback;	// IMP=0x0000000000d35525
- (void)provideSliderBehaviorFeedback;	// IMP=0x0000000000d3551f
- (void)prepareSliderBehaviorFeedback;	// IMP=0x0000000000d35519
- (_Bool)isTrackpadMode;	// IMP=0x0000000000d35509
- (void)deactivateActiveKey;	// IMP=0x0000000000d35474
- (void)deactivateActiveKeys;	// IMP=0x0000000000d353e2
- (void)deactivateActiveKeysClearingTouchInfo:(_Bool)arg1 clearingDimming:(_Bool)arg2;	// IMP=0x0000000000d351fe
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)arg1;	// IMP=0x0000000000d35160
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;	// IMP=0x0000000000d34c6a
- (_Bool)shouldUseDefaultShiftStateFromLayout;	// IMP=0x0000000000d34c62
- (void)setToInitialKeyplane;	// IMP=0x0000000000d34be6
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x0000000000d34bbf
- (void)reloadKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x0000000000d34b98
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5 reload:(_Bool)arg6;	// IMP=0x0000000000d34740
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5;	// IMP=0x0000000000d34724
- (_Bool)_shouldInheritScreenScaleAsContentScaleFactor;	// IMP=0x0000000000d3471c
- (void)updateCachedKeyplaneKeycaps;	// IMP=0x0000000000d34464
- (id)cacheTokenForKeyplane:(id)arg1 caseAlternates:(_Bool)arg2;	// IMP=0x0000000000d341d2
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;	// IMP=0x0000000000d340fa
@property(readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager; // @synthesize emojiKeyManager=_emojiKeyManager;
- (id)keyViewAnimator;	// IMP=0x0000000000d34058
- (void)updateState:(int)arg1 forKey:(id)arg2;	// IMP=0x0000000000d33ff6
- (void)setState:(int)arg1 forKey:(id)arg2;	// IMP=0x0000000000d33edc
- (int)stateForKey:(id)arg1;	// IMP=0x0000000000d33e6d
- (id)viewForKey:(id)arg1;	// IMP=0x0000000000d33df0
- (id)keyplaneFactory;	// IMP=0x0000000000d33d9c
- (void)refreshForDictationAvailablityDidChange;	// IMP=0x0000000000d33c44
- (_Bool)shouldMergeKey:(id)arg1;	// IMP=0x0000000000d3376a
- (id)inputModeToMergeCapsLockKey;	// IMP=0x0000000000d336f9
- (_Bool)canAddRomanSwitchKey;	// IMP=0x0000000000d335e0
- (void)relayoutForWriteboardKey;	// IMP=0x0000000000d3340f
- (void)transitionToModalContinuousPathKeyplane;	// IMP=0x0000000000d332df
- (void)updateReturnKeysIfNeeded;	// IMP=0x0000000000d33216
- (void)updateMoreAndInternationalKeys;	// IMP=0x0000000000d328ea
- (void)recenterMonolithKeyplaneSwitchKeys;	// IMP=0x0000000000d326c7
- (void)_transformCarPlayIfNecessary;	// IMP=0x0000000000d325ca
- (void)_transformFloatingKeyboardIfNecessary;	// IMP=0x0000000000d324dd
- (void)_addResizeTransformationsIfNecessary;	// IMP=0x0000000000d321de
- (void)_addExtraControlKeysIfNecessary;	// IMP=0x0000000000d320f1
- (id)_currentKeyplaneTransformationContext;	// IMP=0x0000000000d31f0b
- (_Bool)_shouldAttemptToAddSupplementaryControlKeys;	// IMP=0x0000000000d31d35
- (void)_updateSupplementaryKeys;	// IMP=0x0000000000d31921
- (void)_swapGlobeAndMoreKeysIfNecessary;	// IMP=0x0000000000d314b1
- (_Bool)_shouldSwapGlobeAndMore;	// IMP=0x0000000000d311b2
- (void)mergeKeysIfNeeded;	// IMP=0x0000000000d310dc
- (id)keylistContainingKey:(id)arg1;	// IMP=0x0000000000d30da8
- (int)stateForKeyplaneSwitchKey:(id)arg1;	// IMP=0x0000000000d30b68
- (void)setTextEditingTraits:(id)arg1;	// IMP=0x0000000000d305c6
- (unsigned long long)textEditingKeyMask;	// IMP=0x0000000000d303b3
- (int)stateForManipulationKey:(id)arg1;	// IMP=0x0000000000d30140
- (id)highlightedVariantListForStylingKey:(id)arg1;	// IMP=0x0000000000d30052
- (int)stateForStylingKey:(id)arg1;	// IMP=0x0000000000d2ff38
- (_Bool)supportStylingWithKey:(id)arg1;	// IMP=0x0000000000d2fe0e
- (int)stateForDictationKey:(id)arg1;	// IMP=0x0000000000d2fc2e
- (int)stateForCandidateListKey:(id)arg1;	// IMP=0x0000000000d2fc23
- (int)stateForMultitapForwardKey:(id)arg1;	// IMP=0x0000000000d2fc11
- (int)stateForMultitapReverseKey:(id)arg1;	// IMP=0x0000000000d2fb18
- (int)displayTypeHintForShiftKey;	// IMP=0x0000000000d2fa84
- (int)displayTypeHintForMoreKey;	// IMP=0x0000000000d2f9d2
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x0000000000d2f2ce
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x0000000000d2ec53
- (void)updateCurrencySymbolForKey:(id)arg1 withCurrencyString:(id)arg2;	// IMP=0x0000000000d2e9b8
- (_Bool)_stringContainsCurrencyCharacters:(id)arg1;	// IMP=0x0000000000d2e7df
- (void)_setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x0000000000d2e42a
- (void)setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x0000000000d2e355
- (void)updateTransitionWithFlags:(unsigned long long)arg1;	// IMP=0x0000000000d2e2cd
- (void)clearKeyAnnotationsIfNecessary;	// IMP=0x0000000000d2ded6
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;	// IMP=0x0000000000d2db91
- (_Bool)useUndoForMessagesWriteboard;	// IMP=0x0000000000d2db07
- (_Bool)useDismissForMessagesWriteboard;	// IMP=0x0000000000d2d6a4
- (_Bool)ignoreWriteboard;	// IMP=0x0000000000d2d5d7
- (void)annotateKeysWithDeveloperPunctuation;	// IMP=0x0000000000d2d011
- (void)updateStateForKey:(id)arg1;	// IMP=0x0000000000d2cb55
- (void)updateAllKeyStates;	// IMP=0x0000000000d2c67f
- (void)rollbackKeyplaneTransformations;	// IMP=0x0000000000d2c43c
- (void)createLayoutFromName:(id)arg1;	// IMP=0x0000000000d273b4
- (_Bool)useCrescendoLayout;	// IMP=0x0000000000d273a4
- (void)reloadCurrentKeyplane;	// IMP=0x0000000000d27330
- (_Bool)_allowPaddle;	// IMP=0x0000000000d2728c
- (_Bool)_allowContinuousPathUI;	// IMP=0x0000000000d270f6
- (_Bool)shouldIgnoreContinuousPathRequirements;	// IMP=0x0000000000d27014
- (_Bool)_allowStartingContinuousPathForTouchInfo:(id)arg1 alreadyActiveKeyExisting:(_Bool)arg2;	// IMP=0x0000000000d26d5d
- (unsigned long long)keyplaneShiftState;	// IMP=0x0000000000d26c60
- (_Bool)shouldAllowCurrentKeyplaneReload;	// IMP=0x0000000000d26c05
- (_Bool)shouldMergeAssistantBarWithKeyboardLayout;	// IMP=0x0000000000d26af4
- (struct CGSize)stretchFactor;	// IMP=0x0000000000d268d6
- (double)stretchFactorHeight;	// IMP=0x0000000000d26740
- (_Bool)stretchKeyboardToFitKeyplane:(id)arg1;	// IMP=0x0000000000d2660d
- (_Bool)stretchKeyboardToFit;	// IMP=0x0000000000d265f0
- (_Bool)showsDedicatedEmojiKeyAlongsideGlobeButton;	// IMP=0x0000000000d264a3
- (_Bool)globeKeyDisplaysAsEmojiKey;	// IMP=0x0000000000d25f87
- (void)updateGlobeKeyDisplayString;	// IMP=0x0000000000d25ed3
- (void)setTwoFingerTapTimestamp:(double)arg1;	// IMP=0x0000000000d25ec1
- (_Bool)shouldAllowSelectionGestures:(_Bool)arg1 atPoint:(struct CGPoint)arg2 toBegin:(_Bool)arg3;	// IMP=0x0000000000d259f2
- (_Bool)isResized;	// IMP=0x0000000000d259a6
- (_Bool)isResizing;	// IMP=0x0000000000d25989
- (_Bool)supportsEmoji;	// IMP=0x0000000000d25981
- (_Bool)canReuseKeyplaneView;	// IMP=0x0000000000d2574d
- (_Bool)shouldShowDictationKey;	// IMP=0x0000000000d253ff
- (void)updateBackgroundIfNeeded;	// IMP=0x0000000000d251d4
- (void)updateBackgroundCorners;	// IMP=0x0000000000d25132
- (_Bool)isHandwritingPlane;	// IMP=0x0000000000d25084
- (void)setTrackpadMode:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000d24a8b
- (void)didEndTrackpadModeForServerSideDictation;	// IMP=0x0000000000d24a75
- (void)willBeginTrackpadModeForServerSideDictation;	// IMP=0x0000000000d24a5c
- (void)didEndIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x0000000000d24a11
- (_Bool)isDeveloperGestureKeybaord;	// IMP=0x0000000000d249bb
- (void)didEndIndirectSelectionGesture;	// IMP=0x0000000000d249a4
- (void)cancelTouchesForTwoFingerTapGesture:(id)arg1;	// IMP=0x0000000000d24959
- (void)willBeginIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x0000000000d2490b
- (void)willBeginIndirectSelectionGesture;	// IMP=0x0000000000d248f4
- (void)setPasscodeOutlineAlpha:(double)arg1;	// IMP=0x0000000000d247be
- (void)didTriggerDestructiveRenderConfigChange;	// IMP=0x0000000000d2474d
- (void)setRenderConfig:(id)arg1 updateKeyplane:(_Bool)arg2;	// IMP=0x0000000000d24337
- (void)traitCollectionDidChange;	// IMP=0x0000000000d24137
- (struct CGImage *)renderedKeyplaneWithToken:(id)arg1 split:(_Bool)arg2;	// IMP=0x0000000000d24055
- (struct CGImage *)renderedImageWithToken:(id)arg1;	// IMP=0x0000000000d23cd7
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)arg1;	// IMP=0x0000000000d23be8
- (struct CGImage *)cachedCompositeImageWithCacheKey:(id)arg1;	// IMP=0x0000000000d2389f
- (void)rebuildSplitTransitionView;	// IMP=0x0000000000d23566
- (_Bool)shouldMatchCaseForDomainKeys;	// IMP=0x0000000000d2355e
- (void)updateLocalizedKeysForKeyplane:(id)arg1 updateAllKeyplanes:(_Bool)arg2;	// IMP=0x0000000000d2324e
- (void)updateLocalizedKeys:(_Bool)arg1;	// IMP=0x0000000000d23216
- (void)updateInputModeLocalizedKeysForKeyplane:(id)arg1;	// IMP=0x0000000000d22313
- (void)updateLocalizedDisplayStringsForKeys:(id)arg1;	// IMP=0x0000000000d2166d
- (void)updateAutolocalizedKeysForKeyplane:(id)arg1;	// IMP=0x0000000000d21528
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;	// IMP=0x0000000000d20c90
- (void)nextToUseInputModeDidChange:(id)arg1;	// IMP=0x0000000000d20bb3
- (id)internationalKeyDisplayStringOnEmojiKeyboard;	// IMP=0x0000000000d20b3b
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)arg1 withInputMode:(id)arg2;	// IMP=0x0000000000d206aa
- (_Bool)canProduceString:(id)arg1;	// IMP=0x0000000000d1ff9e
@property(readonly, nonatomic) _Bool hasActiveKeys;
- (double)lastTouchDownTimestamp;	// IMP=0x0000000000d1ff1a
- (double)lastTouchUpTimestamp;	// IMP=0x0000000000d1ff08
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;	// IMP=0x0000000000d1faca
- (id)keyForKeyboardName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0000000000d1fa49
- (void)updateKeyboardForKeyplane:(id)arg1;	// IMP=0x0000000000d1f8ec
- (struct UIEdgeInsets)keyplanePadding;	// IMP=0x0000000000d1f879
- (struct CGSize)sizeForKeyplane:(id)arg1;	// IMP=0x0000000000d1f42c
- (_Bool)allKeyplanesHaveSameHeight;	// IMP=0x0000000000d1f228
- (void)setKeyboardAppearance:(long long)arg1;	// IMP=0x0000000000d1ef22
- (int)visualStyleForKeyboardIfSplit:(_Bool)arg1;	// IMP=0x0000000000d1ee5f
- (void)refreshForRivenPreferences;	// IMP=0x0000000000d1ecc3
- (void)tearDownSplitTransitionView;	// IMP=0x0000000000d1ec22
- (struct CGRect)frameForKeylayoutName:(id)arg1;	// IMP=0x0000000000d1ea7c
- (struct CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;	// IMP=0x0000000000d1e9f1
- (struct CGRect)dragGestureRectInView:(id)arg1;	// IMP=0x0000000000d1e7cb
- (id)defaultKeyplaneForKeyplane:(id)arg1;	// IMP=0x0000000000d1e73a
- (id)splitNameForKeyplane:(id)arg1;	// IMP=0x0000000000d1e679
- (id)splitNameForKeyplaneName:(id)arg1;	// IMP=0x0000000000d1e622
- (id)defaultNameForKeyplaneName:(id)arg1;	// IMP=0x0000000000d1e5ff
@property(readonly, nonatomic) NSString *localizedInputMode;
- (SEL)handlerForNotification:(id)arg1;	// IMP=0x0000000000d1db63
- (void)flushKeyCache:(id)arg1;	// IMP=0x0000000000d1d8d1
- (void)removeFromSuperview;	// IMP=0x0000000000d1d826
- (void)clearTransientState;	// IMP=0x0000000000d1d74e
- (void)clearUnusedObjects:(_Bool)arg1;	// IMP=0x0000000000d1d3a8
- (void)willMoveToWindow:(id)arg1;	// IMP=0x0000000000d1d31a
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x0000000000d1d2ca
- (void)accessibilitySensitivityChanged;	// IMP=0x0000000000d1d279
- (void)removePathEffectViewConstraintsIfNeeded;	// IMP=0x0000000000d1d230
- (void)dealloc;	// IMP=0x0000000000d1cf76
- (id)initWithFrame:(struct CGRect)arg1;	// IMP=0x0000000000d1cc30
- (id)accessibilityIdentifier;	// IMP=0x0000000000d1cc23
@property(readonly, nonatomic, getter=isRotating) _Bool rotating;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;	// IMP=0x0000000000d5b89b
- (id)popupKeyViews;	// IMP=0x0000000000d5b63c
- (struct CGRect)frameForLastKeyWithRepresentedString:(id)arg1;	// IMP=0x0000000000d5b3f0
- (struct CGRect)frameForKeyWithRepresentedString:(id)arg1;	// IMP=0x0000000000d5af5e
- (id)keyWithRepresentedString:(id)arg1;	// IMP=0x0000000000d5acff
- (id)keyplaneView:(id)arg1 containingViewForActiveKey:(id)arg2;	// IMP=0x0000000000d5d5bd
- (void)_didChangeKeyplaneWithContext:(id)arg1;	// IMP=0x0000000000d5d537
- (void)showPopupView:(long long)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(_Bool)arg4;	// IMP=0x0000000000d5d460
- (void)setKeyboardDim:(_Bool)arg1;	// IMP=0x0000000000d5d1eb
- (void)setPreferredHeight:(double)arg1;	// IMP=0x0000000000d5d06b
- (void)setDisableInteraction:(_Bool)arg1;	// IMP=0x0000000000d5d022
- (void)setKeyboardDim:(_Bool)arg1 amount:(double)arg2 withDuration:(double)arg3;	// IMP=0x0000000000d5cc6f
- (void)dismissGestureKeyboardIntroduction;	// IMP=0x0000000000d5cc2d
- (void)handleDismissFlickView;	// IMP=0x0000000000d5cbbb
- (void)handleDismissFlickView:(id)arg1;	// IMP=0x0000000000d5c94d
- (void)handlePopupView;	// IMP=0x0000000000d5c830
- (void)handlePopupView:(id)arg1;	// IMP=0x0000000000d5c658
- (void)showFlickView:(long long)arg1 withKey:(id)arg2 flickString:(id)arg3;	// IMP=0x0000000000d5c5d9
- (_Bool)handleFlick:(id)arg1;	// IMP=0x0000000000d5c047
- (void)populateFlickPopupsForKey:(id)arg1;	// IMP=0x0000000000d5baf8
- (id)flickStringForInputKey:(id)arg1 direction:(long long)arg2;	// IMP=0x0000000000d5b931
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;	// IMP=0x0000000000d5b8b3
- (void)cancelModalDoubleConsonantKeysTimer;	// IMP=0x0000000000d5f0cd
- (void)handleDoubleConsonantKeysTimerFired;	// IMP=0x0000000000d5eed1
- (void)touchModalDoubleConsonantKeysTimer;	// IMP=0x0000000000d5edbe
- (void)finishContinuousPathView:(_Bool)arg1;	// IMP=0x0000000000d5eb28
- (void)clearContinuousPathView;	// IMP=0x0000000000d5ea33
- (void)addContinuousPathPoint:(struct CGPoint)arg1 withTimestamp:(double)arg2;	// IMP=0x0000000000d5e8cf
- (void)didBeginContinuousPath;	// IMP=0x0000000000d5e48f
- (void)transitionToPunctuationKeysVisible:(_Bool)arg1;	// IMP=0x0000000000d5df9a
- (void)_transitionToContinuousPathState:(long long)arg1 forTouchInfo:(id)arg2;	// IMP=0x0000000000d5defd
@property(retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
- (void)didMoveToWindow;	// IMP=0x0000000000d5d820
- (_Bool)_continuousPathModalPunctuationPlaneEnabled;	// IMP=0x0000000000d5d73e
- (_Bool)_continuousPathSpotlightEffectEnabled;	// IMP=0x0000000000d5d6e9

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

