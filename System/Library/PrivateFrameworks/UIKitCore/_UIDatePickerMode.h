//
//     Generated by classdump-c 4.2.0 (64 bit) (iOS port by DreamDevLost, Updated by Kevin Bradley.)(Debug version compiled Dec 27 2024 14:18:54).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray, NSDate, NSDateComponents, NSNumberFormatter, NSString, UIColor, UIFont, _UIDatePickerView;

__attribute__((visibility("hidden")))
@interface _UIDatePickerMode : NSObject
{
    NSDateComponents *_selectedDateComponents;	// 8 = 0x8
    NSDateComponents *_baseDateComponents;	// 16 = 0x10
    unsigned long long *_elements;	// 24 = 0x18
    long long _yearsSinceBaseDate;	// 32 = 0x20
    struct _NSRange _maxDayRange;	// 40 = 0x28
    struct _NSRange _maxMonthRange;	// 56 = 0x38
    NSString *_localizedFormatString;	// 72 = 0x48
    NSArray *_dateFormatters;	// 80 = 0x50
    UIColor *_todayTextColor;	// 88 = 0x58
    UIFont *_amPmFont;	// 96 = 0x60
    UIFont *_font;	// 104 = 0x68
    UIFont *_defaultTimeFont;	// 112 = 0x70
    NSString *_amString;	// 120 = 0x78
    NSString *_pmString;	// 128 = 0x80
    NSDateComponents *_todayDateComponents;	// 136 = 0x88
    NSNumberFormatter *_formatter;	// 144 = 0x90
    _UIDatePickerView *_datePickerView;	// 152 = 0x98
    _Bool _isUsingJapaneseCalendar;	// 160 = 0xa0
    unsigned long long _numberOfComponents;	// 168 = 0xa8
    long long _minuteInterval;	// 176 = 0xb0
    double _todaySinceReferenceDate;	// 184 = 0xb8
    NSDate *_minimumDate;	// 192 = 0xc0
    NSDateComponents *_minimumDateComponents;	// 200 = 0xc8
    NSDate *_maximumDate;	// 208 = 0xd0
    NSDateComponents *_maximumDateComponents;	// 216 = 0xd8
    NSDate *_baseDate;	// 224 = 0xe0
    NSDate *_originatingDate;	// 232 = 0xe8
}

+ (unsigned long long)extractableCalendarUnits;	// IMP=0x006000000102df09
+ (id)_datePickerModeWithFormatString:(id)arg1 datePickerView:(id)arg2;	// IMP=0x006000000102c498
+ (id)_datePickerModeWithMode:(long long)arg1 datePickerView:(id)arg2;	// IMP=0x006000000102c39e
+ (long long)datePickerMode;	// IMP=0x006000000102c31e
+ (id)newDateFromGregorianYear:(long long)arg1 month:(long long)arg2 day:(long long)arg3 timeZone:(id)arg4;	// IMP=0x006000000102c21c
+ (void)initialize;	// IMP=0x006000000102c168
- (void).cxx_destruct;	// IMP=0x000000000103138f
@property(retain, nonatomic) NSDate *originatingDate; // @synthesize originatingDate=_originatingDate;
@property(nonatomic) long long yearsSinceBaseDate; // @synthesize yearsSinceBaseDate=_yearsSinceBaseDate;
@property(retain, nonatomic) NSDate *baseDate; // @synthesize baseDate=_baseDate;
@property(retain, nonatomic) NSString *localizedFormatString; // @synthesize localizedFormatString=_localizedFormatString;
@property(nonatomic) __weak _UIDatePickerView *datePickerView; // @synthesize datePickerView=_datePickerView;
@property(retain, nonatomic) NSDateComponents *selectedDateComponents; // @synthesize selectedDateComponents=_selectedDateComponents;
@property(readonly, nonatomic) NSDateComponents *maximumDateComponents; // @synthesize maximumDateComponents=_maximumDateComponents;
@property(readonly, nonatomic) NSDate *maximumDate; // @synthesize maximumDate=_maximumDate;
@property(readonly, nonatomic) NSDateComponents *minimumDateComponents; // @synthesize minimumDateComponents=_minimumDateComponents;
@property(readonly, nonatomic) NSDate *minimumDate; // @synthesize minimumDate=_minimumDate;
@property(nonatomic) double todaySinceReferenceDate; // @synthesize todaySinceReferenceDate=_todaySinceReferenceDate;
@property(nonatomic) long long minuteInterval; // @synthesize minuteInterval=_minuteInterval;
@property(nonatomic) unsigned long long numberOfComponents; // @synthesize numberOfComponents=_numberOfComponents;
- (void)updateEnabledStateOfViewForRow:(long long)arg1 inComponent:(long long)arg2;	// IMP=0x00000000010311c4
- (_Bool)_shouldEnableValueForRow:(long long)arg1 inComponent:(long long)arg2 calendarUnit:(unsigned long long)arg3;	// IMP=0x0000000001031144
- (_Bool)_shouldEnableValueForRow:(long long)arg1 column:(long long)arg2;	// IMP=0x0000000001031051
- (_Bool)_scrollingAnyColumnExcept:(int)arg1;	// IMP=0x0000000001030fd8
- (_Bool)_isComponentScrolling:(long long)arg1;	// IMP=0x0000000001030f4d
- (_Bool)areValidDateComponents:(id)arg1 comparingUnits:(long long)arg2;	// IMP=0x0000000001030de6
- (id)viewForRow:(long long)arg1 inComponent:(long long)arg2 reusingView:(id)arg3;	// IMP=0x000000000103096b
- (void)updateDateForNewDateRange;	// IMP=0x000000000103065d
- (id)dateComponentsByRestrictingSelectedComponents:(id)arg1 withLastManipulatedColumn:(long long)arg2;	// IMP=0x000000000103026b
- (_Bool)_monthExists:(long long)arg1 inYear:(long long)arg2;	// IMP=0x0000000001030150
- (long long)_numberOfDaysInDateComponents:(id)arg1;	// IMP=0x000000000102ffe9
@property(readonly, nonatomic) _Bool hasSelectedDateComponents;
- (void)_updateSelectedDateComponentsWithNewValueInComponent:(long long)arg1 usingSelectionBarValue:(_Bool)arg2;	// IMP=0x000000000102fa24
- (void)resetSelectedDateComponentsWithValuesUnderSelectionBars;	// IMP=0x000000000102fa03
- (void)updateSelectedDateComponentsWithNewValueInComponent:(long long)arg1;	// IMP=0x000000000102f9ef
- (void)loadDate:(id)arg1 animated:(_Bool)arg2;	// IMP=0x000000000102f6b7
- (long long)validateValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2;	// IMP=0x000000000102f6ae
- (long long)rowForValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2 currentRow:(long long)arg3;	// IMP=0x000000000102f55c
- (long long)valueForDate:(id)arg1 dateComponents:(id)arg2 calendarUnit:(unsigned long long)arg3;	// IMP=0x000000000102f4fd
- (long long)rowForDate:(id)arg1 dateComponents:(id)arg2 component:(long long)arg3 currentRow:(long long)arg4;	// IMP=0x000000000102f458
- (struct _NSRange)rangeForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102f3d5
- (long long)titleAlignmentForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102f334
- (id)titleForRow:(long long)arg1 inComponent:(long long)arg2;	// IMP=0x000000000102f1bd
- (id)dateFormatForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102f13d
- (id)dateForRow:(long long)arg1 inCalendarUnit:(unsigned long long)arg2;	// IMP=0x000000000102f0c3
- (long long)valueForRow:(long long)arg1 inCalendarUnit:(unsigned long long)arg2;	// IMP=0x000000000102ef8b
- (long long)eraForYearRow:(long long)arg1;	// IMP=0x000000000102eeeb
- (long long)yearForRow:(long long)arg1;	// IMP=0x000000000102ee4b
- (long long)monthForRow:(long long)arg1;	// IMP=0x000000000102ee35
- (long long)dayForRow:(long long)arg1;	// IMP=0x000000000102ee1f
- (long long)hourForRow:(long long)arg1;	// IMP=0x000000000102eddf
- (long long)minuteForRow:(long long)arg1;	// IMP=0x000000000102ed84
- (long long)secondForRow:(long long)arg1;	// IMP=0x000000000102ed29
- (id)_dateForYearRow:(long long)arg1;	// IMP=0x000000000102ec6f
- (id)_dateByEnsuringValue:(long long)arg1 forCalendarUnit:(unsigned long long)arg2;	// IMP=0x000000000102e880
- (unsigned long long)nextUnitSmallerThanUnit:(unsigned long long)arg1;	// IMP=0x000000000102e7f8
- (unsigned long long)nextUnitLargerThanUnit:(unsigned long long)arg1;	// IMP=0x000000000102e770
- (long long)_incrementForStaggeredTimeIntervals;	// IMP=0x000000000102e6ff
- (double)totalComponentWidthWithFont:(id)arg1;	// IMP=0x000000000102e64d
@property(readonly, nonatomic) double totalComponentWidth; // @dynamic totalComponentWidth;
- (void)resetComponentWidths;	// IMP=0x000000000102e579
- (void)noteCalendarChanged;	// IMP=0x000000000102e3b9
- (long long)numberOfRowsForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102e339
- (long long)numberOfRowsInComponent:(long long)arg1;	// IMP=0x000000000102e308
- (long long)componentForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102e29d
- (unsigned long long)calendarUnitForComponent:(long long)arg1;	// IMP=0x000000000102e261
@property(readonly, nonatomic) long long displayedCalendarUnits;
- (void)fixUpElementsForRTL;	// IMP=0x000000000102e084
@property(nonatomic) unsigned long long *elements;
@property(readonly, nonatomic, getter=isTimeIntervalMode) _Bool isTimeIntervalMode; // @dynamic isTimeIntervalMode;
- (double)widthForCalendarUnit:(unsigned long long)arg1 font:(id)arg2 maxWidth:(double)arg3;	// IMP=0x000000000102de88
- (double)widthForComponent:(long long)arg1 maxWidth:(double)arg2;	// IMP=0x000000000102dd79
- (void)invalidateTodayTextColor;	// IMP=0x000000000102dd2f
@property(readonly, nonatomic) UIColor *todayTextColor;
@property(readonly, nonatomic) double rowHeight;
@property(readonly, nonatomic) UIFont *amPmFont;
@property(readonly, nonatomic) UIFont *defaultTimeFont;
@property(readonly, nonatomic) UIFont *sizedFont;
@property(readonly, nonatomic) UIFont *font;
- (id)fontForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102d762
@property(readonly, nonatomic) NSString *pmString;
@property(readonly, nonatomic) NSString *amString;
@property(retain, nonatomic) NSDateComponents *baseDateComponents;
- (void)clearBaseDate;	// IMP=0x000000000102d35a
@property(retain, nonatomic) NSDateComponents *todayDateComponents;
- (id)dateFormatterForCalendarUnit:(unsigned long long)arg1;	// IMP=0x000000000102cdf2
@property(readonly, nonatomic) long long datePickerMode;
@property(readonly, nonatomic, getter=is24Hour) _Bool is24Hour; // @dynamic is24Hour;
- (double)componentWidthForTwoDigitCalendarUnit:(unsigned long long)arg1 font:(id)arg2 maxWidth:(double)arg3;	// IMP=0x000000000102cb17
- (void)_shouldReset:(id)arg1;	// IMP=0x000000000102ca8d
- (id)_style;	// IMP=0x000000000102ca13
- (id)timeZone;	// IMP=0x000000000102c999
- (id)locale;	// IMP=0x000000000102c91f
- (id)calendarForFormatters;	// IMP=0x000000000102c8a5
- (id)calendar;	// IMP=0x000000000102c82b
- (_Bool)followsSystemHourCycle;	// IMP=0x000000000102c7bd
- (long long)_yearlessYearForMonth:(long long)arg1;	// IMP=0x000000000102c716
- (void)dealloc;	// IMP=0x000000000102c681
- (id)init;	// IMP=0x000000000102c524

@end

