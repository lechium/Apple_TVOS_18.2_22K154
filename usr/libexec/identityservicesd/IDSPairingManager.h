//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSCountdown, IDSNRDeviceManager, IDSPairedDeviceRepository, NSData, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSSet, NSString;

@interface IDSPairingManager : NSObject
{
    NSHashTable *_delegateMap;	// 8 = 0x8
    _Bool _hasLoadedPairedDevices;	// 16 = 0x10
    int _pairingStateToken;	// 20 = 0x14
    CDUnknownBlockType _block;	// 24 = 0x18
    _Bool _isPendingResetOfKeyRegenerationFlag;	// 32 = 0x20
    IDSCountdown *_pairedDeviceInfoRequestCountdown;	// 40 = 0x28
    NSMutableDictionary *_cbuuidToBTOutOfBandKeyDictionary;	// 48 = 0x30
    _Bool _shouldQuickSwitchAfterIPSecConnected;	// 56 = 0x38
    IDSNRDeviceManager *_nrDeviceManager;	// 64 = 0x40
    IDSPairedDeviceRepository *_pairedDeviceRepository;	// 72 = 0x48
    NSMutableArray *_registeredPairedDeviceDidConnectBlockPairs;	// 80 = 0x50
}

+ (void)devicePairingProtocolVersion:(unsigned int *)arg1 minCompatibilityVersion:(unsigned int *)arg2 maxCompatibilityVersion:(unsigned int *)arg3;	// IMP=0x00200000001bffda
+ (_Bool)_isTinkerPairedInCapabilityFlags:(unsigned long long)arg1;	// IMP=0x00100000001ba0bd
+ (_Bool)_isIPsecSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x00100000001ba0ae
+ (_Bool)_isEncryptionKeyRegenerationSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x00100000001ba09f
+ (id)sharedInstance;	// IMP=0x00100000001b932e
- (void).cxx_destruct;	// IMP=0x00200000001c06f4
@property(nonatomic) _Bool shouldQuickSwitchAfterIPSecConnected; // @synthesize shouldQuickSwitchAfterIPSecConnected=_shouldQuickSwitchAfterIPSecConnected;
@property(readonly, nonatomic) NSMutableArray *registeredPairedDeviceDidConnectBlockPairs; // @synthesize registeredPairedDeviceDidConnectBlockPairs=_registeredPairedDeviceDidConnectBlockPairs;
@property(readonly, nonatomic) IDSPairedDeviceRepository *pairedDeviceRepository; // @synthesize pairedDeviceRepository=_pairedDeviceRepository;
@property(readonly, nonatomic) IDSNRDeviceManager *nrDeviceManager; // @synthesize nrDeviceManager=_nrDeviceManager;
- (id)_nrDeviceIdentifierWithCBUUID:(id)arg1;	// IMP=0x00100000001c05ec
- (void)deliveryController:(id)arg1 foundNearbyIPsecCapableDeviceWithUniqueID:(id)arg2;	// IMP=0x00100000001c00c6
- (_Bool)pairedDeviceSupportsSendLaterMessages;	// IMP=0x00100000001c00be
- (void)refreshPairedDeviceEncryptionKeys;	// IMP=0x00100000001bfde4
- (_Bool)updatePairedDeviceiCloudURIs:(id)arg1 pushToken:(id)arg2;	// IMP=0x00100000001bfb14
- (_Bool)updatePairedDeviceBuildVersion:(id)arg1 productVersion:(id)arg2 productName:(id)arg3 pairingProtocolVersion:(unsigned int)arg4 minCompatibilityVersion:(unsigned int)arg5 maxCompatibilityVersion:(unsigned int)arg6 serviceMinCompatibilityVersion:(unsigned short)arg7 capabilityFlags:(unsigned long long)arg8 deviceUniqueID:(id)arg9;	// IMP=0x00100000001bf9fc
- (_Bool)_isIPSecLinkEnabled;	// IMP=0x00100000001bf9f2
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 properties:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3;	// IMP=0x00100000001bf9ec
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 wasInitiallySetupUsingIDSPairing:(_Bool)arg2 maxCompatibilityVersion:(id)arg3 BTOutOfBandKey:(id)arg4 supportsIPsecWithSPPLink:(_Bool)arg5 bluetoothMACAddress:(id)arg6;	// IMP=0x00100000001bf94f
- (id)_createRegistrationProperties:(_Bool)arg1 maxCompatibilityVersion:(id)arg2 BTOutOfBandKey:(id)arg3 supportsIPsecWithSPPLink:(_Bool)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x00100000001bf84c
- (_Bool)isMissingAnyPublicKeyForPairedDeviceWithCBUUID:(id)arg1;	// IMP=0x00100000001bf7b6
- (_Bool)setPairedDeviceInfo:(id)arg1;	// IMP=0x00100000001bf5c7
- (_Bool)updateLocalPairedDevice:(id)arg1 pairingType:(long long)arg2;	// IMP=0x00100000001bf44f
- (_Bool)updatePairedDeviceWithCBUUID:(id)arg1 supportIPsec:(_Bool)arg2;	// IMP=0x00100000001bf3d6
- (void)_clearPairedDeviceDidConnectBlocksForUniqueID:(id)arg1;	// IMP=0x00100000001bf0a2
- (void)_callPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 withError:(id)arg2;	// IMP=0x00100000001bed8e
- (void)registerPairedDeviceWithUniqueID:(id)arg1 didConnectBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000001bec1f
- (_Bool)shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:(_Bool)arg1;	// IMP=0x00100000001beace
- (_Bool)shouldUseIPsecLinkForDefaultPairedDevice;	// IMP=0x00100000001beaba
- (id)_cbuuidsWithIsPairingValue:(_Bool)arg1;	// IMP=0x00100000001be883
- (id)pairedDeviceRecords;	// IMP=0x00100000001be42e
- (id)localDeviceRecord;	// IMP=0x00100000001be376
- (id)_identityDataErrorPairForDataProtectionClass:(unsigned int)arg1;	// IMP=0x00100000001be289
- (id)uniqueIDToCbuuidsOfPairingDevicesDictionary;	// IMP=0x00100000001bdff5
- (id)cbuuidsOfPairedDevices;	// IMP=0x00100000001bdfe1
- (id)cbuuidsOfPairingDevices;	// IMP=0x00100000001bdfca
- (_Bool)isTraditionalDevicePairedOrPairing;	// IMP=0x00100000001bdf57
- (_Bool)isCurrentDevicePairedOrPairing;	// IMP=0x00100000001bdee6
- (void)ensureCommunicationWithActivePairedDeviceIsPossible;	// IMP=0x00100000001bdcde
- (void)updateNetworkRelayStateForAllPairedDevices;	// IMP=0x00100000001bd6cb
- (void)deactivatePairedDevices;	// IMP=0x00100000001bd2ea
- (long long)activatePairedDeviceWithCBUUID:(id)arg1;	// IMP=0x00100000001bd0d6
- (void)disconnectActivePairedDevice;	// IMP=0x00100000001bd039
- (_Bool)removeLocalPairedDevice:(id)arg1;	// IMP=0x00100000001bcf9a
- (_Bool)addLocalPairedDevice:(id)arg1 BTOutOfBandKey:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3 pairingType:(long long)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x00100000001bcefb
- (void)removeDelegate:(id)arg1;	// IMP=0x00100000001bceae
- (void)addDelegate:(id)arg1;	// IMP=0x00100000001bce2c
- (void)_updateActiveStateForAllPairedDevices:(_Bool)arg1;	// IMP=0x00100000001bc9ef
- (void)_updateActiveStateForAllPairedDevices;	// IMP=0x00100000001bc9db
- (void)_updatePairedState:(_Bool)arg1;	// IMP=0x00100000001bc8fa
- (_Bool)_hasAllEncryptionKeys;	// IMP=0x00100000001bc7ee
- (id)pairedDeviceForUniqueID:(id)arg1;	// IMP=0x00100000001bc5c2
@property(readonly, nonatomic) NSSet *allTraditionallyPairedUniqueIDs;
@property(readonly, nonatomic) NSSet *allPairedUniqueIDs;
- (_Bool)_isPairedToDevice:(id)arg1;	// IMP=0x00100000001bc0e7
@property(readonly, nonatomic) _Bool isPaired;
@property(readonly, nonatomic) NSDictionary *pairedDevicePrivateData;
- (long long)pairedDevicePairingType;	// IMP=0x00100000001bbf8d
- (id)pairedDeviceiCloudURIs;	// IMP=0x00100000001bbf13
@property(readonly, nonatomic) NSData *pairedDevicePushToken;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassCKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassAKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicKey;
@property(readonly, nonatomic) NSDictionary *pairedDevice;
- (id)pairedDeviceHandlesWithPairingType:(long long)arg1;	// IMP=0x00100000001bba58
- (id)allPairedDevicesWithType:(long long)arg1;	// IMP=0x00100000001bb9f9
@property(readonly, nonatomic) NSSet *allPairedDevices;
@property(readonly, nonatomic) _Bool isCurrentDeviceTinkerConfiguredWatch;
- (_Bool)activePairedDeviceHasPairingType:(long long)arg1;	// IMP=0x00100000001bb92e
@property(readonly, nonatomic) unsigned short pairedDeviceServiceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMaxCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDevicePairingProtocolVersion;
- (id)pairedDeviceProductName;	// IMP=0x00100000001bb6fb
@property(readonly, nonatomic) NSString *pairedDeviceProductVersion;
- (id)pairedDeviceBuildVersion;	// IMP=0x00100000001bb607
@property(readonly, nonatomic) NSString *pairedDeviceUniqueID;
@property(readonly, nonatomic) NSString *pairedDeviceUUIDString;
- (id)_activePairedDeviceCBUUID;	// IMP=0x00100000001bb501
- (void)gatherLocalDeviceInfoWithCompletionBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000001baeab
- (id)_localDevicePrivateData;	// IMP=0x00100000001ba98c
@property(readonly, nonatomic) NSDictionary *localDevice;
- (_Bool)_purgeSecuredEncryptionKeysForAllPairedDevices;	// IMP=0x00100000001ba5d0
- (void)_suspendOTRSessionsWithProtectionClass:(unsigned int)arg1;	// IMP=0x00100000001ba1ff
- (void)_regenerateSecuredEncryptionKeys;	// IMP=0x00100000001ba0cc
- (_Bool)_markSecuredEncryptionKeysAsRegenerated:(_Bool)arg1;	// IMP=0x00100000001b9eb9
- (unsigned long long)_hasRegeneratedSecuredEncryptionKeys;	// IMP=0x00100000001b9c26
- (long long)_migrateSecuredEncryptionKeys;	// IMP=0x00100000001b9c1b
- (void)_loadPairedDevicePropertiesIfNeeded;	// IMP=0x00100000001b9c15
- (void)systemDidLeaveFirstDataProtectionLock;	// IMP=0x00100000001b9c03
- (void)setBTOutOfBandKey:(id)arg1 forCBUUID:(id)arg2;	// IMP=0x00100000001b9b3b
- (id)init;	// IMP=0x00100000001b9aa0
- (id)initWithNRDeviceManager:(id)arg1 pairedDeviceRepository:(id)arg2;	// IMP=0x00100000001b9a71
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00100000001b99bc
- (void)_requestPairedDeviceInfo;	// IMP=0x00100000001b991f
- (void)_requestPairedDeviceInfoAfterDelay:(double)arg1;	// IMP=0x00100000001b9919
- (void)_notifyDelegatesDeviceUnpairedFromDevice:(id)arg1;	// IMP=0x00100000001b9722
- (void)_notifyDelegatesDevicePairedToDevice:(id)arg1;	// IMP=0x00100000001b952b
- (void)_notifyDelegatesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000001b9383

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

