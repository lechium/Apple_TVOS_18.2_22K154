//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSData, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_source;

@interface SDAutoUnlockAKSManager : NSObject
{
    _Bool _wristDetectDisabled;	// 8 = 0x8
    _Bool _autoUnlockDisabledDueToManagement;	// 9 = 0x9
    _Bool _t208Machine;	// 10 = 0xa
    struct os_unfair_lock_s _cachedSessionKeysLock;	// 12 = 0xc
    NSString *_localDeviceID;	// 16 = 0x10
    NSString *_state;	// 24 = 0x18
    NSMutableDictionary *_activeAKSSessions;	// 32 = 0x20
    NSData *_localAttestedLTK;	// 40 = 0x28
    NSData *_localLTK;	// 48 = 0x30
    NSString *_altDSID;	// 56 = 0x38
    NSObject<OS_dispatch_source> *_keybagAssertionTimer;	// 64 = 0x40
    NSMutableDictionary *_remoteLTKs;	// 72 = 0x48
    NSMutableDictionary *_cachedSessions;	// 80 = 0x50
    NSMutableDictionary *_cachedSessionKeys;	// 88 = 0x58
    NSMutableDictionary *_watchIDsToPairingRecords;	// 96 = 0x60
    NSMutableDictionary *_preferredRemoteLTKForDeviceID;	// 104 = 0x68
    NSMutableDictionary *_escrowSecretForDeviceID;	// 112 = 0x70
    NSMutableArray *_watchIDsMissingSessionKey;	// 120 = 0x78
    NSString *_remoteLTKStorageFilePath;	// 128 = 0x80
    NSString *_watchIDsToPairingRecordsStorageFilePath;	// 136 = 0x88
    NSString *_companionIDStorageFilePath;	// 144 = 0x90
    NSString *_watchIDToCompanionIDStorageFilePath;	// 152 = 0x98
}

+ (_Bool)useKeychainForLTKSyncing;	// IMP=0x00200000000c784d
+ (id)sharedManager;	// IMP=0x00100000000ba9ca
- (void).cxx_destruct;	// IMP=0x00200000000ca702
@property(readonly, nonatomic) struct os_unfair_lock_s cachedSessionKeysLock; // @synthesize cachedSessionKeysLock=_cachedSessionKeysLock;
@property(copy, nonatomic) NSString *watchIDToCompanionIDStorageFilePath; // @synthesize watchIDToCompanionIDStorageFilePath=_watchIDToCompanionIDStorageFilePath;
@property(copy, nonatomic) NSString *companionIDStorageFilePath; // @synthesize companionIDStorageFilePath=_companionIDStorageFilePath;
@property(copy, nonatomic) NSString *watchIDsToPairingRecordsStorageFilePath; // @synthesize watchIDsToPairingRecordsStorageFilePath=_watchIDsToPairingRecordsStorageFilePath;
@property(copy, nonatomic) NSString *remoteLTKStorageFilePath; // @synthesize remoteLTKStorageFilePath=_remoteLTKStorageFilePath;
@property(retain, nonatomic) NSMutableArray *watchIDsMissingSessionKey; // @synthesize watchIDsMissingSessionKey=_watchIDsMissingSessionKey;
@property(retain, nonatomic) NSMutableDictionary *escrowSecretForDeviceID; // @synthesize escrowSecretForDeviceID=_escrowSecretForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *preferredRemoteLTKForDeviceID; // @synthesize preferredRemoteLTKForDeviceID=_preferredRemoteLTKForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *watchIDsToPairingRecords; // @synthesize watchIDsToPairingRecords=_watchIDsToPairingRecords;
@property(retain, nonatomic) NSMutableDictionary *cachedSessionKeys; // @synthesize cachedSessionKeys=_cachedSessionKeys;
@property(retain, nonatomic) NSMutableDictionary *cachedSessions; // @synthesize cachedSessions=_cachedSessions;
@property(retain, nonatomic) NSMutableDictionary *remoteLTKs; // @synthesize remoteLTKs=_remoteLTKs;
@property(retain) NSObject<OS_dispatch_source> *keybagAssertionTimer; // @synthesize keybagAssertionTimer=_keybagAssertionTimer;
@property(copy, nonatomic) NSString *altDSID; // @synthesize altDSID=_altDSID;
@property(copy, nonatomic) NSData *localLTK; // @synthesize localLTK=_localLTK;
@property(nonatomic) _Bool t208Machine; // @synthesize t208Machine=_t208Machine;
@property(nonatomic) _Bool autoUnlockDisabledDueToManagement; // @synthesize autoUnlockDisabledDueToManagement=_autoUnlockDisabledDueToManagement;
@property(copy, nonatomic) NSData *localAttestedLTK; // @synthesize localAttestedLTK=_localAttestedLTK;
@property(retain, nonatomic) NSMutableDictionary *activeAKSSessions; // @synthesize activeAKSSessions=_activeAKSSessions;
@property(nonatomic) _Bool wristDetectDisabled; // @synthesize wristDetectDisabled=_wristDetectDisabled;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *localDeviceID; // @synthesize localDeviceID=_localDeviceID;
- (void)updateDynamicStoreEnabled;	// IMP=0x00100000000ca50d
- (id)baseDictionary;	// IMP=0x00100000000ca49d
- (id)baseLocalKeysDictionary;	// IMP=0x00100000000ca450
- (id)baseLocalKeysDictionaryForDevice:(id)arg1 type:(id)arg2;	// IMP=0x00100000000ca3a1
- (id)baseModernSyncedDictionary;	// IMP=0x00100000000ca32e
- (id)attestedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000ca288
- (id)modernSyncedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000ca1e3
- (id)baseSyncedDictionary;	// IMP=0x00100000000ca196
- (id)syncedDictionaryForDevice:(id)arg1;	// IMP=0x00100000000ca0f1
- (id)baseRangingDictionary;	// IMP=0x00100000000ca07e
- (id)baseRangingDictionaryForDevice:(id)arg1;	// IMP=0x00100000000ca00f
- (id)keychainDataForQuery:(id)arg1;	// IMP=0x00100000000c9ee3
- (void)deleteAllRangingKeys;	// IMP=0x00100000000c9d19
- (void)deleteRangingKeyForDeviceID:(id)arg1;	// IMP=0x00100000000c9b79
- (_Bool)storeRangingKey:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00100000000c9918
- (id)rangingKeyForDeviceID:(id)arg1;	// IMP=0x00100000000c98b9
- (id)sessionKeyForDeviceID:(id)arg1;	// IMP=0x00100000000c974b
- (_Bool)sessionKeyExistsForDeviceID:(id)arg1;	// IMP=0x00100000000c9718
- (id)deriveKeyFromSharedSecret:(id)arg1;	// IMP=0x00100000000c960c
- (void)updateSessionKeys;	// IMP=0x00100000000c92a3
- (void)updateRangingKeysIfNeccesary;	// IMP=0x00100000000c8f12
- (void)deleteLocalAttestedLTK;	// IMP=0x00100000000c8e1c
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2 attested:(_Bool)arg3;	// IMP=0x00100000000c8d42
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c8d2d
- (id)ltkInfoForDeviceID:(id)arg1;	// IMP=0x00100000000c8d19
- (id)longTermKeyIDForDeviceID:(id)arg1;	// IMP=0x00100000000c8c6b
- (id)longTermKeyForDevice:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c8c1b
- (id)anyLongTermKeyForDeviceID:(id)arg1;	// IMP=0x00100000000c8b8c
- (void)deleteRemoteLongTermKeyForDeviceID:(id)arg1 modern:(_Bool)arg2 tombstone:(_Bool)arg3;	// IMP=0x00100000000c8aab
- (_Bool)storeAttestedLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00100000000c8826
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3 modern:(_Bool)arg4;	// IMP=0x00100000000c8588
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00100000000c84df
- (void)deleteAllEscrowSecrets;	// IMP=0x00100000000c8414
- (void)deleteEscrowSecretForDeviceID:(id)arg1;	// IMP=0x00100000000c82f9
- (id)escrowSecretCreationDateForDeviceID:(id)arg1;	// IMP=0x00100000000c81be
- (_Bool)escrowSecretExistsForDevice:(id)arg1;	// IMP=0x00100000000c80f4
- (_Bool)storeEscrowSecret:(id)arg1 pairingID:(id)arg2 deviceID:(id)arg3 requiresUnlock:(_Bool)arg4;	// IMP=0x00100000000c7f7c
- (id)keyPairingIDForDeviceID:(id)arg1;	// IMP=0x00100000000c7ec4
- (_Bool)cachedEscrowSecretIsValidForDeviceID:(id)arg1;	// IMP=0x00100000000c7e28
- (_Bool)cachedEscrowSecretExistsForDeviceID:(id)arg1;	// IMP=0x00100000000c7da5
- (id)escrowSecretForDevice:(id)arg1;	// IMP=0x00100000000c79d0
- (_Bool)storeKeychainItemWithAttributeDictionary:(id)arg1 updateDictionary:(id)arg2 addDictionary:(id)arg3;	// IMP=0x00100000000c7855
- (id)autoUnlockFolderPath;	// IMP=0x00100000000c7747
- (id)loadCompanionIDs;	// IMP=0x00100000000c735f
- (void)deleteLegacyCompanionIDs;	// IMP=0x00100000000c7242
- (id)migrateLegacyCompanionIDs:(id)arg1;	// IMP=0x00100000000c7145
- (id)loadLegacyWatchIDToCompanionIDMapping;	// IMP=0x00100000000c6e6c
- (void)deleteLegacyWatchToCompanionIDs;	// IMP=0x00100000000c6d4f
- (void)migrateLegacyWatchIDToCompanionIDs;	// IMP=0x00100000000c6bf8
- (void)loadWatchIDsToPairingRecords;	// IMP=0x00100000000c6b6a
- (void)saveWatchIDsToPairingRecords;	// IMP=0x00100000000c69ba
- (void)removePairingRecordForWatchID:(id)arg1;	// IMP=0x00100000000c693b
- (void)removePairingIDForWatchID:(id)arg1;	// IMP=0x00100000000c67db
- (id)pairingIDForWatchID:(id)arg1;	// IMP=0x00100000000c6733
- (void)setPairingID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00100000000c65a3
- (void)removeCompanionIDForWatchID:(id)arg1;	// IMP=0x00100000000c6443
- (id)companionIDForWatchID:(id)arg1;	// IMP=0x00100000000c639b
- (void)setCompanionID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00100000000c620b
- (id)allPairedWatchDeviceIDs;	// IMP=0x00100000000c61bb
- (void)reloadPairingRecordsIfNeeded;	// IMP=0x00100000000c611f
- (void)loadRemoteLTKs;	// IMP=0x00100000000c5bf8
- (void)loadRemoteLTKsIfNeeded;	// IMP=0x00100000000c5baf
- (void)saveRemoteLTKs;	// IMP=0x00100000000c59ff
- (void)clearRemoteLTKs;	// IMP=0x00100000000c5929
- (void)removeRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c582d
- (void)addRemoteLTK:(id)arg1 ltkHash:(id)arg2 ltkModDate:(id)arg3 modernLTK:(id)arg4 modernLTKHash:(id)arg5 modernLTKModeDate:(id)arg6 deviceID:(id)arg7;	// IMP=0x00100000000c557b
- (_Bool)disablePairingWithKeyDevice:(id)arg1;	// IMP=0x00100000000c54a4
- (_Bool)ltkExistsForKeyDevice:(id)arg1 updateLTKs:(_Bool)arg2;	// IMP=0x00100000000c533a
- (_Bool)ltkExistsForKeyDevice:(id)arg1;	// IMP=0x00100000000c5326
- (void)removeAllRemoteLTKsOnSignOut;	// IMP=0x00100000000c5044
- (void)disablePairingForAllLockPhones;	// IMP=0x00100000000c4cf7
- (void)disablePairingForAllKeyDevices;	// IMP=0x00100000000c4a03
- (void)deleteEscrowSecretForPhones;	// IMP=0x00100000000c4679
- (void)deleteEscrowSecretForAllDevices;	// IMP=0x00100000000c4297
- (void)handleRequiredStateDisabled;	// IMP=0x00100000000c4291
- (_Bool)deviceEnabledAsKey:(id)arg1;	// IMP=0x00100000000c409d
- (_Bool)deviceEnabledAsKeyForAnyMac;	// IMP=0x00100000000c3df1
- (_Bool)deviceEnabledAsKeyForAnyDevice;	// IMP=0x00100000000c3ae1
- (_Bool)deviceEnabledAsKeyForAnyIDSMac;	// IMP=0x00100000000c3835
- (_Bool)deviceEnabledAsKeyForAnyIDSDevice;	// IMP=0x00100000000c3600
- (_Bool)deviceEnabledAsKeyForIDSDeviceID:(id)arg1;	// IMP=0x00100000000c34d9
- (_Bool)localDeviceEnabledAsKeyForMac;	// IMP=0x00100000000c3467
- (_Bool)localDeviceEnabledAsKey;	// IMP=0x00100000000c33f5
- (void)transport:(id)arg1 didReceivePayload:(id)arg2 type:(unsigned short)arg3 deviceID:(id)arg4;	// IMP=0x00100000000c3328
- (void)handleLTKResponse:(id)arg1;	// IMP=0x00100000000c3322
- (void)restartKeybagAssertionTimer;	// IMP=0x00100000000c312e
- (void)releaseKeybagAssertion;	// IMP=0x00100000000c30d2
- (void)takeMobileKeybagAssertion;	// IMP=0x00100000000c3076
- (id)ltksForRequest:(id)arg1;	// IMP=0x00100000000c2a76
- (void)handleLTKRequest:(id)arg1;	// IMP=0x00100000000c2a70
- (void)sendLTKResponseWithPayload:(id)arg1 viewState:(id)arg2 needsUnlock:(id)arg3 currentlySyncing:(id)arg4;	// IMP=0x00100000000c2a6a
- (void)fetchLTKsFromCompanionForDeviceID:(id)arg1 needsLTK:(_Bool)arg2 remoteNeedsLTK:(_Bool)arg3 checkViewState:(_Bool)arg4;	// IMP=0x00100000000c2a64
- (void)fetchLTKsFromCompanion:(_Bool)arg1;	// IMP=0x00100000000c2a48
- (void)updatePreferredRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c269a
- (id)remoteLTKList;	// IMP=0x00100000000c2494
- (id)remoteLTKEntryForDeviceID:(id)arg1;	// IMP=0x00100000000c241a
- (id)remoteLTKHashForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c23ab
- (_Bool)hashMatchesAnyRemoteLTKForDeviceID:(id)arg1 ltkHash:(id)arg2 isPreferred:(_Bool *)arg3;	// IMP=0x00100000000c203e
- (id)remoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c1f60
- (id)allRemoteLTKData;	// IMP=0x00100000000c1e34
- (void)signAndStoreRemoteLTK:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00100000000c19c4
- (id)signedDevices;	// IMP=0x00100000000c1870
- (id)modernSignedDevices;	// IMP=0x00100000000c171c
- (id)modificationDataForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00100000000c1589
- (id)keychainDevices:(_Bool)arg1;	// IMP=0x00100000000c12d5
- (id);	// IMP=0x00100000000c12c1
- (_Bool)signLTK:(id)arg1 ltkModDate:(id)arg2 modernLTK:(id)arg3 modernLTKModDate:(id)arg4 deviceID:(id)arg5;	// IMP=0x00100000000c0f0c
- (_Bool)signLTK:(id)arg1 modernLTK:(id)arg2 forDeviceID:(id)arg3;	// IMP=0x00100000000c0ee2
- (_Bool)signLTKsForDeviceID:(id)arg1;	// IMP=0x00100000000c0e3e
- (void)resignRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c0e2c
- (void)removeCorruptedRemoteLTKIfNecessaryForDeviceID:(id)arg1;	// IMP=0x00100000000c0e26
- (void)checkPhoneRemoteLTKs;	// IMP=0x00100000000c0bfd
- (void)checkRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00100000000c09ea
- (void)checkRemoteLTKs;	// IMP=0x00100000000c09e4
- (void)updateRemoteLTKs;	// IMP=0x00100000000c09ce
- (void)updateLTKsForDeviceID:(id)arg1 staleRemoteLTK:(_Bool)arg2;	// IMP=0x00100000000c0158
- (void)generateLocalAttestedLTKIfNeccessaryWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000000bff87
- (int)ltkSyncStatusForDeviceID:(id)arg1 hash:(id)arg2 modern:(_Bool)arg3;	// IMP=0x00100000000bfe08
- (_Bool)deviceIsLocalDevice:(id)arg1;	// IMP=0x00100000000bfd9a
- (long long)keyClassForDeviceID:(id)arg1;	// IMP=0x00100000000bfca2
- (long long)ltkKeyClassWithAttestation:(_Bool)arg1;	// IMP=0x00100000000bfb6e
- (void)updateLocalLTKForSignout;	// IMP=0x00100000000bfa23
- (id)ltkHashForLocalLTK;	// IMP=0x00100000000bf9a4
- (void)checkLocalAttestedLTK;	// IMP=0x00100000000bf99e
- (void)checkLocalLTK;	// IMP=0x00100000000bf194
- (_Bool)isMobileActivationErrorNetworkError:(id)arg1;	// IMP=0x00100000000bf18c
- (void)generateLocalLTKWithAttestation:(_Bool)arg1 forceDCRTRetrievalWithCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00100000000be8ec
- (void)generateLocalLTKWithAttestation:(_Bool)arg1;	// IMP=0x00100000000be8d8
- (_Bool)loadLocalAttestedLTKIfNecessary;	// IMP=0x00100000000be8d0
- (_Bool)loadLocalLTK;	// IMP=0x00100000000be346
- (id)deviceIDsMissingSessionKey;	// IMP=0x00100000000be220
- (void)clearAllDeviceIDsMissingSessionKeys;	// IMP=0x00100000000be0fa
- (void)removeDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00100000000bdfb8
- (void)addDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00100000000bde3f
- (id)decryptMessage:(id)arg1 authTag:(id)arg2 nonce:(id)arg3 bluetoothID:(id)arg4 cachedDevices:(_Bool)arg5 errorCode:(long long *)arg6;	// IMP=0x00100000000bd3c4
- (_Bool)encryptMessageData:(id)arg1 deviceID:(id)arg2 encryptedMessage:(id *)arg3 authTag:(id *)arg4 nonce:(id *)arg5;	// IMP=0x00100000000bd08e
- (_Bool)canCreateTokenSessionForDeviceID:(id)arg1;	// IMP=0x00100000000bd044
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 attestation:(_Bool)arg2 originator:(_Bool)arg3 externalACMContext:(id)arg4 sessionType:(long long)arg5;	// IMP=0x00100000000bcd6e
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 sessionType:(long long)arg3;	// IMP=0x00100000000bcd45
- (id)aksAuthSessionForDeviceID:(id)arg1 attestation:(_Bool)arg2 sessionType:(long long)arg3 escrowSecret:(id)arg4;	// IMP=0x00100000000bc9f3
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 usingEscrow:(_Bool)arg3 attestation:(_Bool)arg4 sessionType:(long long)arg5;	// IMP=0x00100000000bc5cb
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00100000000bc5a2
- (id)aksRegistrationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00100000000bc3c2
- (id)aksPairingSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 errorCode:(long long *)arg3 requiresAttestation:(_Bool)arg4 requiresEscrow:(_Bool)arg5;	// IMP=0x00100000000bc102
- (void)consoleUserChanged:(id)arg1;	// IMP=0x00100000000bbfe3
- (void)handleKeyBagLockStateChanged;	// IMP=0x00100000000bbfdd
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x00100000000bbf21
- (void)appleAccountSignedOut:(id)arg1;	// IMP=0x00100000000bbe73
- (void)appleAccountSignedIn:(id)arg1;	// IMP=0x00100000000bbe17
- (void)deviceFirstUnlocked:(id)arg1;	// IMP=0x00100000000bbe05
- (void)handleManagementChanged:(id)arg1;	// IMP=0x00100000000bbdcb
- (void)addObservers;	// IMP=0x00100000000bbc93
- (void)loadLocalUniqueIDIfNeeded;	// IMP=0x00100000000bbb90
@property(readonly, nonatomic) _Bool viewSyncing;
- (void)updateLocalLTK;	// IMP=0x00100000000bae8c
- (void)updateLTKs;	// IMP=0x00100000000badd5
- (void)start;	// IMP=0x00100000000bac08
- (id)init;	// IMP=0x00100000000baa1f

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

