//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CNAccessAuthorization, CNContactStore, CNContactsEnvironment, CNDataMapperConfiguration, NSString, NSXPCConnection;
@protocol CNContactsLogger, CNQueryAnalyticsLogger, CNRegulatoryLogger, CNScheduler, CNiOSAddressBookDataMapper, OS_dispatch_queue, OS_tcc_identity;

@interface ContactsService : NSObject
{
    CNContactStore *_contactStore;	// 8 = 0x8
    id <CNiOSAddressBookDataMapper> _dataMapper;	// 16 = 0x10
    NSXPCConnection *_connection;	// 24 = 0x18
    CNDataMapperConfiguration *_dataMapperConfiguration;	// 32 = 0x20
    id <CNScheduler> _workQueue;	// 40 = 0x28
    id <CNScheduler> _highPriorityWorkQueue;	// 48 = 0x30
    id <CNContactsLogger> _logger;	// 56 = 0x38
    CNContactsEnvironment *_environment;	// 64 = 0x40
    CNAccessAuthorization *_accessAuthorization;	// 72 = 0x48
    id <CNRegulatoryLogger> _regulatoryLogger;	// 80 = 0x50
    NSObject<OS_tcc_identity> *_assumedIdentity;	// 88 = 0x58
    NSObject<OS_dispatch_queue> *_backgroundColorQueue;	// 96 = 0x60
    id <CNQueryAnalyticsLogger> _queryAnalyticsLogger;	// 104 = 0x68
}

+ (Class)dataMapperClassForConnection:(id)arg1;	// IMP=0x0020000000001ea5
+ (id)managedConfigurationForConnection:(id)arg1;	// IMP=0x0010000000001de8
- (void).cxx_destruct;	// IMP=0x0020000000007a52
@property(retain, nonatomic) id <CNQueryAnalyticsLogger> queryAnalyticsLogger; // @synthesize queryAnalyticsLogger=_queryAnalyticsLogger;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *backgroundColorQueue; // @synthesize backgroundColorQueue=_backgroundColorQueue;
@property(retain, nonatomic) NSObject<OS_tcc_identity> *assumedIdentity; // @synthesize assumedIdentity=_assumedIdentity;
@property(retain, nonatomic) id <CNRegulatoryLogger> regulatoryLogger; // @synthesize regulatoryLogger=_regulatoryLogger;
@property(readonly, nonatomic) CNAccessAuthorization *accessAuthorization; // @synthesize accessAuthorization=_accessAuthorization;
@property(readonly, nonatomic) CNContactsEnvironment *environment; // @synthesize environment=_environment;
@property(readonly, nonatomic) id <CNContactsLogger> logger; // @synthesize logger=_logger;
@property(readonly, nonatomic) id <CNScheduler> highPriorityWorkQueue; // @synthesize highPriorityWorkQueue=_highPriorityWorkQueue;
@property(readonly, nonatomic) id <CNScheduler> workQueue; // @synthesize workQueue=_workQueue;
@property(readonly, nonatomic) CNDataMapperConfiguration *dataMapperConfiguration; // @synthesize dataMapperConfiguration=_dataMapperConfiguration;
@property(readonly, nonatomic) __weak NSXPCConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) id <CNiOSAddressBookDataMapper> dataMapper; // @synthesize dataMapper=_dataMapper;
@property(readonly, nonatomic) CNContactStore *contactStore; // @synthesize contactStore=_contactStore;
- (void)analyzeDatabaseWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000007969
- (void)shouldAnalyzeDatabaseWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000007952
- (void)setLimitedAccessTableCurrentSequenceNumber:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000794c
- (void)dropAllLimitedAccessRowsAndSyncNotifyWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0000000000007946
- (void)dropAllLimitedAccessRowsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000007940
- (void)applyLimitedAccessSyncEvents:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000793a
- (void)getWatchLimitedAccessSyncDataStartingAtSequenceNumber:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007934
- (void)getLimitedAccessLastSyncSequenceNumberWithReply:(CDUnknownBlockType)arg1;	// IMP=0x001000000000792e
- (void)updateLimitedAccessTable:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007928
- (void)purgeLimitedAccessRecordsForBundle:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007922
- (void)populateSyncTableForLimitedAccessAboveSequenceNumber:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000791c
- (void)removeLimitedAccessForBundle:(id)arg1 contactIdentifiers:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000007916
- (void)removeLimitedAccessForBundle:(id)arg1 contactIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000007910
- (void)getLimitedAccessContactsCountForBundle:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000790a
- (void)addLimitedAccessForBundle:(id)arg1 contactIdentifiers:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000007904
- (void)addLimitedAccessForBundle:(id)arg1 contactIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000078fe
- (void)fetchLimitedAccessContactIdentifiersForBundle:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000078f8
- (void)getBackgroundColorOnImageData:(id)arg1 bitmapFormat:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000078f2
- (void)authorizedKeysForContactKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000784e
- (void)verifyIndexWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000077e1
- (void)reindexSearchableItemsWithIdentifiers:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000077d6
- (void)writeFavoritesPropertyListData:(id)arg1 toPath:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000007395
- (void)favoritesEntryDictionariesAtPath:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000007090
- (_Bool)shouldNotReportFavoritesError:(id)arg1;	// IMP=0x0010000000006f37
- (void)reportFavoritesIssue:(id)arg1;	// IMP=0x0010000000006edd
- (void)currentHistoryAnchorWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000006d92
- (void)currentHistoryTokenWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000006c53
- (void)executeChangeHistoryClearRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000006a09
- (void)changeHistoryWithFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000068b6
- (void)unregisterChangeHistoryClientIdentifier:(id)arg1 forContainerIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000006620
- (void)registerChangeHistoryClientIdentifier:(id)arg1 forContainerIdentifier:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x001000000000638a
- (void)userActivityForContact:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000060f2
- (void)contactWithUserActivityUserInfo:(id)arg1 keysToFetch:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000005e13
- (void)setBestMeIfNeededForGivenName:(id)arg1 familyName:(id)arg2 email:(id)arg3 withReply:(CDUnknownBlockType)arg4;	// IMP=0x0010000000005aae
- (void)setMeContact:(id)arg1 forContainer:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x00100000000057cd
- (void)setMeContact:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000055ef
- (void)setDefaultAccountIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000053d1
- (void)defaultContainerIdentifierWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000052d0
- (void)subgroupsOfGroupWithIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000517d
- (void)groupsMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000502a
- (void)accountsMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004ed7
- (void)policyForContainerWithIdentifier:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004d84
- (void)serverSearchContainersMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004c31
- (void)containersMatchingPredicate:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004ade
- (void)executeSaveRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000004925
- (void)meContactIdentifiersWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000004733
- (void)identifierWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000004609
- (void)progressiveContactsForFetchRequest:(id)arg1 progressHandler:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000000422b
- (void)encodedContactsAndCursorForFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003cdf
- (void)contactsForFetchRequest:(id)arg1 withMatchInfoReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000392c
- (void)sectionListOffsetsForSortOrder:(long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003707
- (void)contactCountForFetchRequest:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000000344c
- (void)unifiedContactCountWithReply:(CDUnknownBlockType)arg1;	// IMP=0x0010000000003322
- (void)performWorkServicingSPI:(CDUnknownBlockType)arg1 authenticationFailureHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000003287
- (void)performServicingRequestWork:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002dee
- (id)_bestWorkQueueForAuditToken:(CDStruct_6ad76789)arg1;	// IMP=0x0010000000002cc2
- (void)performWorkWithContactStore:(CDUnknownBlockType)arg1;	// IMP=0x0010000000002b7e
- (void)performAsyncWorkWithDataMapper:(CDUnknownBlockType)arg1;	// IMP=0x00100000000029f4
- (void)performWorkWithDataMapper:(CDUnknownBlockType)arg1;	// IMP=0x00100000000028d8
- (_Bool)clientAllowedToUseSPI:(id *)arg1;	// IMP=0x00100000000024c0
- (void)configureAssumedIdentityWithOptions:(id)arg1;	// IMP=0x00100000000024ba
- (id)unitTestBaseURLWithOptions:(id)arg1;	// IMP=0x00100000000023bd
- (void)configureUnitTestWithOptions:(id)arg1;	// IMP=0x0010000000001f0b
- (void)configureServiceWithOptions:(id)arg1;	// IMP=0x0010000000001eb6
- (id)initWithDataMapper:(id)arg1 dataMapperConfiguration:(id)arg2 workQueue:(id)arg3 highPriorityWorkQueue:(id)arg4 connection:(id)arg5 accessAuthorization:(id)arg6;	// IMP=0x0010000000001b0b
- (id)initWithWorkQueue:(id)arg1 highPriorityWorkQueue:(id)arg2 connection:(id)arg3;	// IMP=0x00100000000018b7

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

