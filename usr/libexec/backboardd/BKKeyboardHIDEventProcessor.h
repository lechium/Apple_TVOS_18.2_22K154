//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class BKDisplayController, BKHIDDomainServiceServer, BKIOHIDServiceMatcher, BKKeyboardInfo, BSCompoundAssertion, NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString;
@protocol BKHIDEventDispatcher, BKHIDEventProcessorRegistering, BKHIDSystemInterfacing, BSInvalidatable;

@interface BKKeyboardHIDEventProcessor : NSObject
{
    struct os_unfair_lock_s _lock;	// 8 = 0x8
    BKHIDDomainServiceServer *_server;	// 16 = 0x10
    unsigned long long _lock_keyboardPublicationSeed;	// 24 = 0x18
    NSMutableDictionary *_allKeyboardsBySenderID;	// 32 = 0x20
    NSMutableArray *_usableKeyboards;	// 40 = 0x28
    NSMutableArray *_eventRecognizers;	// 48 = 0x30
    NSMutableSet *_keyCommandsToAuthenticate;	// 56 = 0x38
    NSString *_keyboardLayout;	// 64 = 0x40
    BSCompoundAssertion *_keyboardObserverAssertion;	// 72 = 0x48
    long long _globalActiveModifiers;	// 80 = 0x50
    id <BSInvalidatable> _displayBlankingObservationAssertion;	// 88 = 0x58
    long long _countOfKeyboardsRequiringAllSmartCoverHESDisengagedForOpen;	// 96 = 0x60
    NSMutableDictionary *_keyDownToEventSequence;	// 104 = 0x68
    NSMutableDictionary *_senderIDToKeysDown;	// 112 = 0x70
    NSMutableSet *_senderIDsWithModifiersOnly;	// 120 = 0x78
    NSMutableDictionary *_productIdentifierWithCapsLockActiveToGeneration;	// 128 = 0x80
    long long _keyboardGeneration;	// 136 = 0x88
    BKIOHIDServiceMatcher *_keyboardServiceMatcher;	// 144 = 0x90
    id <BKHIDSystemInterfacing> _eventSystemInterface;	// 152 = 0x98
    id <BKHIDEventDispatcher> _eventDispatcher;	// 160 = 0xa0
    id <BKHIDEventProcessorRegistering> _eventProcessorRegistry;	// 168 = 0xa8
    BKDisplayController *_displayController;	// 176 = 0xb0
    BKKeyboardInfo *_primaryKeyboardInfo;	// 184 = 0xb8
    NSMutableSet *_downModifierKeys;	// 192 = 0xc0
}

- (void).cxx_destruct;	// IMP=0x0020000000036d9c
- (id)setObservingUsableKeyboardConnections:(id)arg1;	// IMP=0x0010000000036c71
- (void)appendDescriptionToFormatter:(id)arg1;	// IMP=0x0010000000036b39
- (void)serviceDidDisappear:(id)arg1;	// IMP=0x0010000000036ade
- (void)matcher:(id)arg1 servicesDidMatch:(id)arg2;	// IMP=0x0010000000036a0a
- (void)display:(id)arg1 didBecomeBlank:(_Bool)arg2;	// IMP=0x00100000000369c3
- (void)bufferDidEndDraining:(id)arg1;	// IMP=0x0010000000036911
- (void)bufferWillBeginDraining:(id)arg1;	// IMP=0x001000000003690b
- (void)bufferingDidAddNewBuffers:(id)arg1;	// IMP=0x0010000000036743
- (long long)processEvent:(inout struct __IOHIDEvent **)arg1 withContext:(id)arg2 buffer:(id)arg3 sequence:(id)arg4 sender:(id)arg5 dispatcher:(id)arg6 resolution:(id)arg7;	// IMP=0x001000000003664c
- (void)postEvent:(struct __IOHIDEvent *)arg1 withContext:(id)arg2 toResolution:(id)arg3 fromSequence:(id)arg4;	// IMP=0x0010000000035ffa
- (void)conformsToBKHIDBufferedEventProcessor;	// IMP=0x0010000000035ff4
- (long long)processEvent:(inout struct __IOHIDEvent **)arg1 sender:(id)arg2 dispatcher:(id)arg3;	// IMP=0x0010000000035ec1
- (void)_modifierRemappingsDidChange;	// IMP=0x0010000000035c37
- (void)_lock_setCapsLockActive:(_Bool)arg1 onSenderID:(unsigned long long)arg2;	// IMP=0x0010000000035985
- (void)_lock_setCapsLockState:(_Bool)arg1 forKeyboard:(id)arg2;	// IMP=0x001000000003588d
- (void)_lock_postSyntheticCapsLockPressForKeyboard:(id)arg1;	// IMP=0x0010000000035766
- (void)_lock_smartKeyboardAttachmentStateDidChange:(id)arg1;	// IMP=0x0010000000035678
- (void)smartKeyboardAttachmentStateDidChange:(id)arg1;	// IMP=0x001000000003561d
- (void)_lock_stopWatchingForGestures:(id)arg1;	// IMP=0x0010000000035548
- (void)_lock_watchForGestures:(id)arg1;	// IMP=0x00100000000350a6
- (void)_lock_handleKeyEvent:(struct __IOHIDEvent *)arg1 fromSender:(id)arg2 dispatcher:(id)arg3 bypassCapsLockChecks:(_Bool)arg4;	// IMP=0x0010000000034ddf
- (void)_lock_dispatchKeyEvent:(struct __IOHIDEvent *)arg1 keyCommand:(id)arg2 keyboardInfo:(id)arg3 eventSource:(int)arg4 fromSender:(id)arg5 dispatcher:(id)arg6;	// IMP=0x0010000000034629
- (void)_lock_applyDeliveryInformation:(id)arg1 resolution:(id)arg2 toEvent:(struct __IOHIDEvent *)arg3;	// IMP=0x0010000000034329
- (void)_lock_handleUnicodeEvent:(struct __IOHIDEvent *)arg1 fromSender:(id)arg2 dispatcher:(id)arg3;	// IMP=0x00100000000341ae
- (int)_eventSourceForKeyboardInfo:(id)arg1 sender:(id)arg2;	// IMP=0x0010000000034178
- (void)_lock_cancelKeyDownEvents:(id)arg1;	// IMP=0x00100000000340a1
- (void)_lock_usableKeyboardDetached:(id)arg1;	// IMP=0x0010000000033ebe
- (void)_lock_removeCapsLockEntryIfNeeded:(id)arg1;	// IMP=0x0010000000033dbf
- (void)_lock_removeSenderIDFromTracking:(unsigned long long)arg1;	// IMP=0x0010000000033af9
- (void)_lock_removeModifierKeyDown:(id)arg1;	// IMP=0x0010000000033a36
- (void)_lock_addModifierKeyDown:(id)arg1;	// IMP=0x0010000000033973
- (void)_lock_usableKeyboardAttached:(id)arg1;	// IMP=0x00100000000337fd
- (void)_lock_publishUsableKeyboardsToServiceConnections;	// IMP=0x0010000000033748
- (void)_lock_publishUsableKeyboards:(id)arg1 toServiceConnection:(id)arg2;	// IMP=0x00100000000335c9
- (void)_lock_restoreCapsLockStateToKeyboard:(id)arg1;	// IMP=0x0010000000033454
- (void)_lock_setPrimaryKeyboard:(id)arg1;	// IMP=0x00100000000332c2
- (void)_lock_keyboardRemoved:(id)arg1;	// IMP=0x0010000000033056
- (void)_lock_keyboardsDetected:(id)arg1;	// IMP=0x0010000000032fd9
- (void)_lock_setKeyboardLightsSuspended:(_Bool)arg1;	// IMP=0x0010000000032e76
- (_Bool)_lock_anyKeyboardHasCapsLockActive;	// IMP=0x0010000000032d59
- (long long)_lock_activeModifiers;	// IMP=0x0010000000032d03
- (void)_lock_updateGlobalModifierState;	// IMP=0x0010000000032b84
@property(copy) NSSet *keyCommandsToAuthenticate;
- (_Bool)capsLockKeyHasLanguageSwitchLabel;	// IMP=0x0010000000032af7
@property(getter=isCapsLockLightOn) _Bool capsLockLightOn;
- (void)setStandardType:(unsigned int)arg1 forSenderID:(unsigned long long)arg2;	// IMP=0x00100000000328ba
- (void)setCapsLockDelayOverride:(double)arg1;	// IMP=0x001000000003276c
- (void)setRomanCapsLockSwitchModeActive:(_Bool)arg1;	// IMP=0x001000000003262e
@property(copy) NSArray *allUsableDeviceProperties; // @dynamic allUsableDeviceProperties;
- (id)devicePropertiesForSenderID:(unsigned long long)arg1;	// IMP=0x001000000003249b
- (_Bool)keyboardWantsStandardTypeOverrideForSenderID:(unsigned long long)arg1;	// IMP=0x00100000000322d5
- (_Bool)isCapsLockLightOnForSenderID:(unsigned long long)arg1;	// IMP=0x0010000000032229
- (void)setCapsLockActive:(_Bool)arg1 onSenderID:(unsigned long long)arg2;	// IMP=0x00100000000321db
- (void)setCapsLockDelayOverride:(double)arg1 forSenderID:(unsigned long long)arg2;	// IMP=0x0010000000032132
- (void)setRomanCapsLockSwitchModeActive:(_Bool)arg1 forSenderID:(unsigned long long)arg2;	// IMP=0x0010000000032069
- (void)setKeyboardLayout:(id)arg1 forSenderID:(unsigned long long)arg2;	// IMP=0x0010000000031e5d
- (id)keyboardLanguageForSenderID:(unsigned long long)arg1;	// IMP=0x0010000000031daa
- (id)addGlobalKeyboardObserver:(id)arg1;	// IMP=0x0010000000031c59
@property(readonly) long long activeModifiers;
@property(retain) NSString *keyboardLayout;
- (int)eventSourceForSender:(id)arg1;	// IMP=0x0010000000031791
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

- (void)dealloc;	// IMP=0x0010000000031627
- (void)_commonInitWithContext:(id)arg1 server:(id)arg2;	// IMP=0x00100000000310c5
- (id)initWithContext:(id)arg1 server:(id)arg2;	// IMP=0x0010000000031038
- (id)initWithContext:(id)arg1;	// IMP=0x0010000000030f3c

// Remaining properties
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

