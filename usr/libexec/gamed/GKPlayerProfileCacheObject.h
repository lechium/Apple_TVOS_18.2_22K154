//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class GKAchievementPointsListCacheObject, GKChallengeListCacheObject, GKFriendListCacheObject, GKFriendRecommendationListCacheObject, GKFriendRequestListCacheObject, GKGameListCacheObject, NSDate, NSNumber, NSSet, NSString;

@interface GKPlayerProfileCacheObject
{
}

+ (id)entityName;	// IMP=0x00200000000f70f6
+ (id)playerProfilesWithPlayerIDs:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x00100000000f57d0
+ (id)playerProfilesWithPlayers:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x00100000000f572b
+ (id)profileForPlayer:(id)arg1 context:(id)arg2;	// IMP=0x00100000000f5640
+ (id)playerProfileWithPlayerID:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x00100000000f5367
+ (id)localPlayerInManagedObjectContext:(id)arg1;	// IMP=0x00100000000f50b9
+ (const void *)uniqueObjectIDLookupKey;	// IMP=0x00100000000f4696
+ (id)uniqueAttributeName;	// IMP=0x00100000000f4689
+ (id)filterPlayerIDs:(id)arg1 familiarity:(int)arg2 includeSelf:(_Bool)arg3;	// IMP=0x00100000000f86ef
+ (unsigned char)piecesToLoadForFamiliarity:(int)arg1;	// IMP=0x00100000000f86c7
+ (id)playersByFamiliarity:(id)arg1;	// IMP=0x00100000000f813b
+ (void)setFamiliarPlayerIDs:(id)arg1 familiarity:(int)arg2;	// IMP=0x00100000000f7f00
+ (void)removeFamiliarPlayerIDs:(id)arg1 familiarity:(int)arg2;	// IMP=0x00100000000f7bb6
+ (void)addFamiliarPlayerIDs:(id)arg1 familiarity:(int)arg2;	// IMP=0x00100000000f79aa
+ (int)familiarityForPlayerID:(id)arg1;	// IMP=0x00100000000f77af
+ (id)selfPlayerID;	// IMP=0x00100000000f7758
+ (void)buildFamiliarilyLookupForProfile:(id)arg1;	// IMP=0x00100000000f747d
+ (id)_familiarityLookup;	// IMP=0x00100000000f7286
- (void)expireRecentMatchesWithGame:(id)arg1;	// IMP=0x00200000000f7103
- (id)internalRepresentation;	// IMP=0x00100000000f6f37
- (id)internalRepresentationWithPieces:(unsigned char)arg1;	// IMP=0x00100000000f6d4f
- (void)updateWithServerRepresentation:(id)arg1 expirationDate:(id)arg2 pieces:(unsigned char)arg3;	// IMP=0x00100000000f5ef8
- (id)updateImagesWithImageURLs:(id)arg1;	// IMP=0x00100000000f5b09
- (void)updateWithServerRepresentation:(id)arg1 expirationDate:(id)arg2;	// IMP=0x00100000000f5af4
- (void)deleteCachedImage:(id)arg1;	// IMP=0x00100000000f4d98
- (void)deleteCachedAvatars;	// IMP=0x00100000000f4b69
- (void)clearImages;	// IMP=0x00100000000f4825
@property(nonatomic, getter=isFindable) _Bool findable; // @dynamic findable;
@property(nonatomic, getter=isUnderage) _Bool underage; // @dynamic underage;
- (void)invalidate;	// IMP=0x00100000000f4719
@property(readonly, nonatomic, getter=isValid) _Bool valid;
@property(readonly, nonatomic) _Bool isLocalPlayer; // @dynamic isLocalPlayer;
@property(readonly, nonatomic) int familiarity; // @dynamic familiarity;

// Remaining properties
@property(retain, nonatomic) NSNumber *acceptedGameInviteFromThisFriend; // @dynamic acceptedGameInviteFromThisFriend;
@property(retain, nonatomic) NSSet *achievementLists; // @dynamic achievementLists;
@property(retain, nonatomic) GKAchievementPointsListCacheObject *achievementPointsList; // @dynamic achievementPointsList;
@property(nonatomic) int achievementsVisibility; // @dynamic achievementsVisibility;
@property(retain, nonatomic) NSString *alias; // @dynamic alias;
@property(nonatomic) _Bool allowChallengeFriendInvites; // @dynamic allowChallengeFriendInvites;
@property(nonatomic) _Bool allowMultiplayerFriendInvites; // @dynamic allowMultiplayerFriendInvites;
@property(nonatomic) _Bool allowReceivingFriendInvites; // @dynamic allowReceivingFriendInvites;
@property(retain, nonatomic) NSNumber *automatchedTogether; // @dynamic automatchedTogether;
@property(nonatomic) int availablePieces; // @dynamic availablePieces;
@property(retain, nonatomic) NSNumber *avatarType; // @dynamic avatarType;
@property(retain, nonatomic) GKChallengeListCacheObject *challengeList; // @dynamic challengeList;
@property(nonatomic) _Bool challengedTogether; // @dynamic challengedTogether;
@property(retain, nonatomic) NSString *contactsAssociationID; // @dynamic contactsAssociationID;
@property(nonatomic) int contactsIntegrationConsent; // @dynamic contactsIntegrationConsent;
@property(readonly, copy) NSString *debugDescription;
// Preceding property had unknown attributes: ?
// Original attribute string: T@"NSString",?,R,C

@property(nonatomic) _Bool defaultContactsIntegrationConsent; // @dynamic defaultContactsIntegrationConsent;
@property(nonatomic) _Bool defaultNickname; // @dynamic defaultNickname;
@property(nonatomic) _Bool defaultPrivacyVisibility; // @dynamic defaultPrivacyVisibility;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSString *firstName; // @dynamic firstName;
@property(retain, nonatomic) NSNumber *friendBiDirectional; // @dynamic friendBiDirectional;
@property(retain, nonatomic) NSSet *friendLeaderboards; // @dynamic friendLeaderboards;
@property(retain, nonatomic) NSNumber *friendLevel; // @dynamic friendLevel;
@property(retain, nonatomic) GKFriendListCacheObject *friendList; // @dynamic friendList;
@property(retain, nonatomic) NSNumber *friendPlayedNearby; // @dynamic friendPlayedNearby;
@property(retain, nonatomic) NSNumber *friendPlayedWith; // @dynamic friendPlayedWith;
@property(retain, nonatomic) GKFriendRecommendationListCacheObject *friendRecommendationList; // @dynamic friendRecommendationList;
@property(retain, nonatomic) GKFriendRequestListCacheObject *friendRequestList; // @dynamic friendRequestList;
@property(nonatomic) int friendsVisibility; // @dynamic friendsVisibility;
@property(retain, nonatomic) GKGameListCacheObject *gameList; // @dynamic gameList;
@property(retain, nonatomic) NSSet *gameRecords; // @dynamic gameRecords;
@property(nonatomic) int gamesPlayedVisibility; // @dynamic gamesPlayedVisibility;
@property(nonatomic) int globalFriendListAccess; // @dynamic globalFriendListAccess;
@property(readonly) unsigned long long hash;
@property(retain, nonatomic) NSString *image128; // @dynamic image128;
@property(retain, nonatomic) NSString *image256; // @dynamic image256;
@property(retain, nonatomic) NSString *image512; // @dynamic image512;
@property(retain, nonatomic) NSString *image64; // @dynamic image64;
@property(retain, nonatomic) NSString *imageTemplate; // @dynamic imageTemplate;
@property(retain, nonatomic) NSNumber *initiatedGameInviteToThisFriend; // @dynamic initiatedGameInviteToThisFriend;
@property(nonatomic) _Bool isArcadeSubscriber; // @dynamic isArcadeSubscriber;
@property(nonatomic) NSDate *lastChallengedDate; // @dynamic lastChallengedDate;
@property(nonatomic) NSString *lastChallengedGame; // @dynamic lastChallengedGame;
@property(retain, nonatomic) NSString *lastName; // @dynamic lastName;
@property(retain, nonatomic) NSDate *lastPlayedDate; // @dynamic lastPlayedDate;
@property(retain, nonatomic) NSString *lastPlayedGame; // @dynamic lastPlayedGame;
@property(retain, nonatomic) NSSet *leaderboardLists; // @dynamic leaderboardLists;
@property(nonatomic) int numberOfAchievementPoints; // @dynamic numberOfAchievementPoints;
@property(nonatomic) int numberOfAchievements; // @dynamic numberOfAchievements;
@property(nonatomic) int numberOfFriends; // @dynamic numberOfFriends;
@property(nonatomic) int numberOfFriendsInCommon; // @dynamic numberOfFriendsInCommon;
@property(nonatomic) int numberOfGames; // @dynamic numberOfGames;
@property(nonatomic) int numberOfGamesInCommon; // @dynamic numberOfGamesInCommon;
@property(nonatomic) int numberOfTurns; // @dynamic numberOfTurns;
@property(retain, nonatomic) NSSet *otherRecentGameLists; // @dynamic otherRecentGameLists;
@property(retain, nonatomic) NSSet *ownedRecentGameLists; // @dynamic ownedRecentGameLists;
@property(nonatomic) _Bool photoPending; // @dynamic photoPending;
@property(retain, nonatomic) NSDate *photoPendingExpirationDate; // @dynamic photoPendingExpirationDate;
@property(retain, nonatomic) NSString *playerID; // @dynamic playerID;
@property(nonatomic) _Bool purpleBuddyAccount; // @dynamic purpleBuddyAccount;
@property(retain, nonatomic) NSSet *recentPlayerLists; // @dynamic recentPlayerLists;
@property(retain, nonatomic) NSDate *serviceLastUpdatedTimestamp; // @dynamic serviceLastUpdatedTimestamp;
@property(retain, nonatomic) NSString *status; // @dynamic status;
@property(readonly) Class superclass;

@end

